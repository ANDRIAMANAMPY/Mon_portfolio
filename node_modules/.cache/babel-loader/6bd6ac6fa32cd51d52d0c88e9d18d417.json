{"ast":null,"code":"import { useContext, useRef, useInsertionEffect } from 'react';\nimport { isMotionValue } from './utils/is-motion-value.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nimport { animateValue } from '../animation/animators/MainThreadAnimation.mjs';\nimport { frameData } from '../frameloop/frame.mjs';\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\n\nfunction useSpring(source) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    isStatic\n  } = useContext(MotionConfigContext);\n  const activeSpringAnimation = useRef(null);\n  const value = useMotionValue(isMotionValue(source) ? source.get() : source);\n\n  const stopAnimation = () => {\n    if (activeSpringAnimation.current) {\n      activeSpringAnimation.current.stop();\n    }\n  };\n\n  useInsertionEffect(() => {\n    return value.attach((v, set) => {\n      /**\n       * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n       * at that level, but this will work for now\n       */\n      if (isStatic) return set(v);\n      /**\n       * If the previous animation hasn't had the chance to even render a frame, render it now.\n       */\n\n      const animation = activeSpringAnimation.current;\n\n      if (animation && animation.time === 0) {\n        animation.sample(frameData.delta);\n      }\n\n      stopAnimation();\n      activeSpringAnimation.current = animateValue({\n        keyframes: [value.get(), v],\n        velocity: value.getVelocity(),\n        type: \"spring\",\n        restDelta: 0.001,\n        restSpeed: 0.01,\n        ...config,\n        onUpdate: set\n      });\n      return value.get();\n    }, stopAnimation);\n  }, [JSON.stringify(config)]);\n  useIsomorphicLayoutEffect(() => {\n    if (isMotionValue(source)) {\n      return source.on(\"change\", v => value.set(parseFloat(v)));\n    }\n  }, [value]);\n  return value;\n}\n\nexport { useSpring };","map":{"version":3,"sources":["C:/Users/ANDRIAM'Hajatiana/Desktop/portfolio/portfolio-starter/node_modules/framer-motion/dist/es/value/use-spring.mjs"],"names":["useContext","useRef","useInsertionEffect","isMotionValue","useMotionValue","MotionConfigContext","useIsomorphicLayoutEffect","animateValue","frameData","useSpring","source","config","isStatic","activeSpringAnimation","value","get","stopAnimation","current","stop","attach","v","set","animation","time","sample","delta","keyframes","velocity","getVelocity","type","restDelta","restSpeed","onUpdate","JSON","stringify","on","parseFloat"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,kBAA7B,QAAuD,OAAvD;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,mBAAT,QAAoC,oCAApC;AACA,SAASC,yBAAT,QAA0C,oCAA1C;AACA,SAASC,YAAT,QAA6B,gDAA7B;AACA,SAASC,SAAT,QAA0B,wBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAmBC,MAAnB,EAAwC;AAAA,MAAbC,MAAa,uEAAJ,EAAI;AACpC,QAAM;AAAEC,IAAAA;AAAF,MAAeZ,UAAU,CAACK,mBAAD,CAA/B;AACA,QAAMQ,qBAAqB,GAAGZ,MAAM,CAAC,IAAD,CAApC;AACA,QAAMa,KAAK,GAAGV,cAAc,CAACD,aAAa,CAACO,MAAD,CAAb,GAAwBA,MAAM,CAACK,GAAP,EAAxB,GAAuCL,MAAxC,CAA5B;;AACA,QAAMM,aAAa,GAAG,MAAM;AACxB,QAAIH,qBAAqB,CAACI,OAA1B,EAAmC;AAC/BJ,MAAAA,qBAAqB,CAACI,OAAtB,CAA8BC,IAA9B;AACH;AACJ,GAJD;;AAKAhB,EAAAA,kBAAkB,CAAC,MAAM;AACrB,WAAOY,KAAK,CAACK,MAAN,CAAa,CAACC,CAAD,EAAIC,GAAJ,KAAY;AAC5B;AACZ;AACA;AACA;AACY,UAAIT,QAAJ,EACI,OAAOS,GAAG,CAACD,CAAD,CAAV;AACJ;AACZ;AACA;;AACY,YAAME,SAAS,GAAGT,qBAAqB,CAACI,OAAxC;;AACA,UAAIK,SAAS,IAAIA,SAAS,CAACC,IAAV,KAAmB,CAApC,EAAuC;AACnCD,QAAAA,SAAS,CAACE,MAAV,CAAiBhB,SAAS,CAACiB,KAA3B;AACH;;AACDT,MAAAA,aAAa;AACbH,MAAAA,qBAAqB,CAACI,OAAtB,GAAgCV,YAAY,CAAC;AACzCmB,QAAAA,SAAS,EAAE,CAACZ,KAAK,CAACC,GAAN,EAAD,EAAcK,CAAd,CAD8B;AAEzCO,QAAAA,QAAQ,EAAEb,KAAK,CAACc,WAAN,EAF+B;AAGzCC,QAAAA,IAAI,EAAE,QAHmC;AAIzCC,QAAAA,SAAS,EAAE,KAJ8B;AAKzCC,QAAAA,SAAS,EAAE,IAL8B;AAMzC,WAAGpB,MANsC;AAOzCqB,QAAAA,QAAQ,EAAEX;AAP+B,OAAD,CAA5C;AASA,aAAOP,KAAK,CAACC,GAAN,EAAP;AACH,KAzBM,EAyBJC,aAzBI,CAAP;AA0BH,GA3BiB,EA2Bf,CAACiB,IAAI,CAACC,SAAL,CAAevB,MAAf,CAAD,CA3Be,CAAlB;AA4BAL,EAAAA,yBAAyB,CAAC,MAAM;AAC5B,QAAIH,aAAa,CAACO,MAAD,CAAjB,EAA2B;AACvB,aAAOA,MAAM,CAACyB,EAAP,CAAU,QAAV,EAAqBf,CAAD,IAAON,KAAK,CAACO,GAAN,CAAUe,UAAU,CAAChB,CAAD,CAApB,CAA3B,CAAP;AACH;AACJ,GAJwB,EAItB,CAACN,KAAD,CAJsB,CAAzB;AAKA,SAAOA,KAAP;AACH;;AAED,SAASL,SAAT","sourcesContent":["import { useContext, useRef, useInsertionEffect } from 'react';\nimport { isMotionValue } from './utils/is-motion-value.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nimport { animateValue } from '../animation/animators/MainThreadAnimation.mjs';\nimport { frameData } from '../frameloop/frame.mjs';\n\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\nfunction useSpring(source, config = {}) {\n    const { isStatic } = useContext(MotionConfigContext);\n    const activeSpringAnimation = useRef(null);\n    const value = useMotionValue(isMotionValue(source) ? source.get() : source);\n    const stopAnimation = () => {\n        if (activeSpringAnimation.current) {\n            activeSpringAnimation.current.stop();\n        }\n    };\n    useInsertionEffect(() => {\n        return value.attach((v, set) => {\n            /**\n             * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n             * at that level, but this will work for now\n             */\n            if (isStatic)\n                return set(v);\n            /**\n             * If the previous animation hasn't had the chance to even render a frame, render it now.\n             */\n            const animation = activeSpringAnimation.current;\n            if (animation && animation.time === 0) {\n                animation.sample(frameData.delta);\n            }\n            stopAnimation();\n            activeSpringAnimation.current = animateValue({\n                keyframes: [value.get(), v],\n                velocity: value.getVelocity(),\n                type: \"spring\",\n                restDelta: 0.001,\n                restSpeed: 0.01,\n                ...config,\n                onUpdate: set,\n            });\n            return value.get();\n        }, stopAnimation);\n    }, [JSON.stringify(config)]);\n    useIsomorphicLayoutEffect(() => {\n        if (isMotionValue(source)) {\n            return source.on(\"change\", (v) => value.set(parseFloat(v)));\n        }\n    }, [value]);\n    return value;\n}\n\nexport { useSpring };\n"]},"metadata":{},"sourceType":"module"}