{"ast":null,"code":"// src/hooks/useChain.ts\nimport { each, useIsomorphicLayoutEffect } from \"@react-spring/shared\"; // src/helpers.ts\n\nimport { is, toArray, eachProp, getFluidValue, isAnimatedString, Globals as G } from \"@react-spring/shared\";\n\nfunction callProp(value) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return is.fun(value) ? value(...args) : value;\n}\n\nvar matchProp = (value, key) => value === true || !!(key && value && (is.fun(value) ? value(key) : toArray(value).includes(key)));\n\nvar resolveProp = (prop, key) => is.obj(prop) ? key && prop[key] : prop;\n\nvar getDefaultProp = (props, key) => props.default === true ? props[key] : props.default ? props.default[key] : void 0;\n\nvar noopTransform = value => value;\n\nvar getDefaultProps = function (props) {\n  let transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noopTransform;\n  let keys = DEFAULT_PROPS;\n\n  if (props.default && props.default !== true) {\n    props = props.default;\n    keys = Object.keys(props);\n  }\n\n  const defaults2 = {};\n\n  for (const key of keys) {\n    const value = transform(props[key], key);\n\n    if (!is.und(value)) {\n      defaults2[key] = value;\n    }\n  }\n\n  return defaults2;\n};\n\nvar DEFAULT_PROPS = [\"config\", \"onProps\", \"onStart\", \"onChange\", \"onPause\", \"onResume\", \"onRest\"];\nvar RESERVED_PROPS = {\n  config: 1,\n  from: 1,\n  to: 1,\n  ref: 1,\n  loop: 1,\n  reset: 1,\n  pause: 1,\n  cancel: 1,\n  reverse: 1,\n  immediate: 1,\n  default: 1,\n  delay: 1,\n  onProps: 1,\n  onStart: 1,\n  onChange: 1,\n  onPause: 1,\n  onResume: 1,\n  onRest: 1,\n  onResolve: 1,\n  // Transition props\n  items: 1,\n  trail: 1,\n  sort: 1,\n  expires: 1,\n  initial: 1,\n  enter: 1,\n  update: 1,\n  leave: 1,\n  children: 1,\n  onDestroyed: 1,\n  // Internal props\n  keys: 1,\n  callId: 1,\n  parentId: 1\n};\n\nfunction getForwardProps(props) {\n  const forward = {};\n  let count = 0;\n  eachProp(props, (value, prop) => {\n    if (!RESERVED_PROPS[prop]) {\n      forward[prop] = value;\n      count++;\n    }\n  });\n\n  if (count) {\n    return forward;\n  }\n}\n\nfunction inferTo(props) {\n  const to2 = getForwardProps(props);\n\n  if (to2) {\n    const out = {\n      to: to2\n    };\n    eachProp(props, (val, key) => key in to2 || (out[key] = val));\n    return out;\n  }\n\n  return { ...props\n  };\n}\n\nfunction computeGoal(value) {\n  value = getFluidValue(value);\n  return is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? G.createStringInterpolator({\n    range: [0, 1],\n    output: [value, value]\n  })(1) : value;\n}\n\nfunction hasProps(props) {\n  for (const _ in props) return true;\n\n  return false;\n}\n\nfunction isAsyncTo(to2) {\n  return is.fun(to2) || is.arr(to2) && is.obj(to2[0]);\n}\n\nfunction detachRefs(ctrl, ref) {\n  ctrl.ref?.delete(ctrl);\n  ref?.delete(ctrl);\n}\n\nfunction replaceRef(ctrl, ref) {\n  if (ref && ctrl.ref !== ref) {\n    ctrl.ref?.delete(ctrl);\n    ref.add(ctrl);\n    ctrl.ref = ref;\n  }\n} // src/hooks/useChain.ts\n\n\nfunction useChain(refs, timeSteps) {\n  let timeFrame = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e3;\n  useIsomorphicLayoutEffect(() => {\n    if (timeSteps) {\n      let prevDelay = 0;\n      each(refs, (ref, i) => {\n        const controllers = ref.current;\n\n        if (controllers.length) {\n          let delay = timeFrame * timeSteps[i];\n          if (isNaN(delay)) delay = prevDelay;else prevDelay = delay;\n          each(controllers, ctrl => {\n            each(ctrl.queue, props => {\n              const memoizedDelayProp = props.delay;\n\n              props.delay = key => delay + callProp(memoizedDelayProp || 0, key);\n            });\n          });\n          ref.start();\n        }\n      });\n    } else {\n      let p = Promise.resolve();\n      each(refs, ref => {\n        const controllers = ref.current;\n\n        if (controllers.length) {\n          const queues = controllers.map(ctrl => {\n            const q = ctrl.queue;\n            ctrl.queue = [];\n            return q;\n          });\n          p = p.then(() => {\n            each(controllers, (ctrl, i) => each(queues[i] || [], update2 => ctrl.queue.push(update2)));\n            return Promise.all(ref.start());\n          });\n        }\n      });\n    }\n  });\n} // src/hooks/useSpring.ts\n\n\nimport { is as is9 } from \"@react-spring/shared\"; // src/hooks/useSprings.ts\n\nimport { useContext as useContext2, useMemo, useRef } from \"react\";\nimport { is as is8, each as each5, usePrev, useOnce, useForceUpdate, useIsomorphicLayoutEffect as useIsomorphicLayoutEffect2 } from \"@react-spring/shared\"; // src/SpringValue.ts\n\nimport { is as is5, raf as raf3, each as each2, isEqual, toArray as toArray2, eachProp as eachProp3, frameLoop as frameLoop2, flushCalls, getFluidValue as getFluidValue2, isAnimatedString as isAnimatedString2, Globals as G5, callFluidObservers as callFluidObservers2, hasFluidValue, addFluidObserver, removeFluidObserver, getFluidObservers } from \"@react-spring/shared\";\nimport { AnimatedValue, AnimatedString, getPayload, getAnimated as getAnimated2, setAnimated, getAnimatedType } from \"@react-spring/animated\"; // src/AnimationConfig.ts\n\nimport { is as is2, easings } from \"@react-spring/shared\"; // src/constants.ts\n\nvar config = {\n  default: {\n    tension: 170,\n    friction: 26\n  },\n  gentle: {\n    tension: 120,\n    friction: 14\n  },\n  wobbly: {\n    tension: 180,\n    friction: 12\n  },\n  stiff: {\n    tension: 210,\n    friction: 20\n  },\n  slow: {\n    tension: 280,\n    friction: 60\n  },\n  molasses: {\n    tension: 280,\n    friction: 120\n  }\n}; // src/AnimationConfig.ts\n\nvar defaults = { ...config.default,\n  mass: 1,\n  damping: 1,\n  easing: easings.linear,\n  clamp: false\n};\nvar AnimationConfig = class {\n  constructor() {\n    /**\n     * The initial velocity of one or more values.\n     *\n     * @default 0\n     */\n    this.velocity = 0;\n    Object.assign(this, defaults);\n  }\n\n};\n\nfunction mergeConfig(config2, newConfig, defaultConfig) {\n  if (defaultConfig) {\n    defaultConfig = { ...defaultConfig\n    };\n    sanitizeConfig(defaultConfig, newConfig);\n    newConfig = { ...defaultConfig,\n      ...newConfig\n    };\n  }\n\n  sanitizeConfig(config2, newConfig);\n  Object.assign(config2, newConfig);\n\n  for (const key in defaults) {\n    if (config2[key] == null) {\n      config2[key] = defaults[key];\n    }\n  }\n\n  let {\n    frequency,\n    damping\n  } = config2;\n  const {\n    mass\n  } = config2;\n\n  if (!is2.und(frequency)) {\n    if (frequency < 0.01) frequency = 0.01;\n    if (damping < 0) damping = 0;\n    config2.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;\n    config2.friction = 4 * Math.PI * damping * mass / frequency;\n  }\n\n  return config2;\n}\n\nfunction sanitizeConfig(config2, props) {\n  if (!is2.und(props.decay)) {\n    config2.duration = void 0;\n  } else {\n    const isTensionConfig = !is2.und(props.tension) || !is2.und(props.friction);\n\n    if (isTensionConfig || !is2.und(props.frequency) || !is2.und(props.damping) || !is2.und(props.mass)) {\n      config2.duration = void 0;\n      config2.decay = void 0;\n    }\n\n    if (isTensionConfig) {\n      config2.frequency = void 0;\n    }\n  }\n} // src/Animation.ts\n\n\nvar emptyArray = [];\nvar Animation = class {\n  constructor() {\n    this.changed = false;\n    this.values = emptyArray;\n    this.toValues = null;\n    this.fromValues = emptyArray;\n    this.config = new AnimationConfig();\n    this.immediate = false;\n  }\n\n}; // src/scheduleProps.ts\n\nimport { is as is3, raf, Globals as G2 } from \"@react-spring/shared\";\n\nfunction scheduleProps(callId, _ref) {\n  let {\n    key,\n    props,\n    defaultProps,\n    state,\n    actions\n  } = _ref;\n  return new Promise((resolve, reject) => {\n    let delay;\n    let timeout;\n    let cancel = matchProp(props.cancel ?? defaultProps?.cancel, key);\n\n    if (cancel) {\n      onStart();\n    } else {\n      if (!is3.und(props.pause)) {\n        state.paused = matchProp(props.pause, key);\n      }\n\n      let pause = defaultProps?.pause;\n\n      if (pause !== true) {\n        pause = state.paused || matchProp(pause, key);\n      }\n\n      delay = callProp(props.delay || 0, key);\n\n      if (pause) {\n        state.resumeQueue.add(onResume);\n        actions.pause();\n      } else {\n        actions.resume();\n        onResume();\n      }\n    }\n\n    function onPause() {\n      state.resumeQueue.add(onResume);\n      state.timeouts.delete(timeout);\n      timeout.cancel();\n      delay = timeout.time - raf.now();\n    }\n\n    function onResume() {\n      if (delay > 0 && !G2.skipAnimation) {\n        state.delayed = true;\n        timeout = raf.setTimeout(onStart, delay);\n        state.pauseQueue.add(onPause);\n        state.timeouts.add(timeout);\n      } else {\n        onStart();\n      }\n    }\n\n    function onStart() {\n      if (state.delayed) {\n        state.delayed = false;\n      }\n\n      state.pauseQueue.delete(onPause);\n      state.timeouts.delete(timeout);\n\n      if (callId <= (state.cancelId || 0)) {\n        cancel = true;\n      }\n\n      try {\n        actions.start({ ...props,\n          callId,\n          cancel\n        }, resolve);\n      } catch (err) {\n        reject(err);\n      }\n    }\n  });\n} // src/runAsync.ts\n\n\nimport { is as is4, raf as raf2, flush, eachProp as eachProp2, Globals as G3 } from \"@react-spring/shared\"; // src/AnimationResult.ts\n\nvar getCombinedResult = (target, results) => results.length == 1 ? results[0] : results.some(result => result.cancelled) ? getCancelledResult(target.get()) : results.every(result => result.noop) ? getNoopResult(target.get()) : getFinishedResult(target.get(), results.every(result => result.finished));\n\nvar getNoopResult = value => ({\n  value,\n  noop: true,\n  finished: true,\n  cancelled: false\n});\n\nvar getFinishedResult = function (value, finished) {\n  let cancelled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return {\n    value,\n    finished,\n    cancelled\n  };\n};\n\nvar getCancelledResult = value => ({\n  value,\n  cancelled: true,\n  finished: false\n}); // src/runAsync.ts\n\n\nfunction runAsync(to2, props, state, target) {\n  const {\n    callId,\n    parentId,\n    onRest\n  } = props;\n  const {\n    asyncTo: prevTo,\n    promise: prevPromise\n  } = state;\n\n  if (!parentId && to2 === prevTo && !props.reset) {\n    return prevPromise;\n  }\n\n  return state.promise = (async () => {\n    state.asyncId = callId;\n    state.asyncTo = to2;\n    const defaultProps = getDefaultProps(props, (value, key) => // The `onRest` prop is only called when the `runAsync` promise is resolved.\n    key === \"onRest\" ? void 0 : value);\n    let preventBail;\n    let bail;\n    const bailPromise = new Promise((resolve, reject) => (preventBail = resolve, bail = reject));\n\n    const bailIfEnded = bailSignal => {\n      const bailResult = // The `cancel` prop or `stop` method was used.\n      callId <= (state.cancelId || 0) && getCancelledResult(target) || // The async `to` prop was replaced.\n      callId !== state.asyncId && getFinishedResult(target, false);\n\n      if (bailResult) {\n        bailSignal.result = bailResult;\n        bail(bailSignal);\n        throw bailSignal;\n      }\n    };\n\n    const animate = (arg1, arg2) => {\n      const bailSignal = new BailSignal();\n      const skipAnimationSignal = new SkipAnimationSignal();\n      return (async () => {\n        if (G3.skipAnimation) {\n          stopAsync(state);\n          skipAnimationSignal.result = getFinishedResult(target, false);\n          bail(skipAnimationSignal);\n          throw skipAnimationSignal;\n        }\n\n        bailIfEnded(bailSignal);\n        const props2 = is4.obj(arg1) ? { ...arg1\n        } : { ...arg2,\n          to: arg1\n        };\n        props2.parentId = callId;\n        eachProp2(defaultProps, (value, key) => {\n          if (is4.und(props2[key])) {\n            props2[key] = value;\n          }\n        });\n        const result2 = await target.start(props2);\n        bailIfEnded(bailSignal);\n\n        if (state.paused) {\n          await new Promise(resume => {\n            state.resumeQueue.add(resume);\n          });\n        }\n\n        return result2;\n      })();\n    };\n\n    let result;\n\n    if (G3.skipAnimation) {\n      stopAsync(state);\n      return getFinishedResult(target, false);\n    }\n\n    try {\n      let animating;\n\n      if (is4.arr(to2)) {\n        animating = (async queue => {\n          for (const props2 of queue) {\n            await animate(props2);\n          }\n        })(to2);\n      } else {\n        animating = Promise.resolve(to2(animate, target.stop.bind(target)));\n      }\n\n      await Promise.all([animating.then(preventBail), bailPromise]);\n      result = getFinishedResult(target.get(), true, false);\n    } catch (err) {\n      if (err instanceof BailSignal) {\n        result = err.result;\n      } else if (err instanceof SkipAnimationSignal) {\n        result = err.result;\n      } else {\n        throw err;\n      }\n    } finally {\n      if (callId == state.asyncId) {\n        state.asyncId = parentId;\n        state.asyncTo = parentId ? prevTo : void 0;\n        state.promise = parentId ? prevPromise : void 0;\n      }\n    }\n\n    if (is4.fun(onRest)) {\n      raf2.batchedUpdates(() => {\n        onRest(result, target, target.item);\n      });\n    }\n\n    return result;\n  })();\n}\n\nfunction stopAsync(state, cancelId) {\n  flush(state.timeouts, t => t.cancel());\n  state.pauseQueue.clear();\n  state.resumeQueue.clear();\n  state.asyncId = state.asyncTo = state.promise = void 0;\n  if (cancelId) state.cancelId = cancelId;\n}\n\nvar BailSignal = class extends Error {\n  constructor() {\n    super(\"An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.\");\n  }\n\n};\nvar SkipAnimationSignal = class extends Error {\n  constructor() {\n    super(\"SkipAnimationSignal\");\n  }\n\n}; // src/FrameValue.ts\n\nimport { deprecateInterpolate, frameLoop, FluidValue as FluidValue2, Globals as G4, callFluidObservers } from \"@react-spring/shared\";\nimport { getAnimated } from \"@react-spring/animated\";\n\nvar isFrameValue = value => value instanceof FrameValue;\n\nvar nextId = 1;\nvar FrameValue = class extends FluidValue2 {\n  constructor() {\n    super(...arguments);\n    this.id = nextId++;\n    this._priority = 0;\n  }\n\n  get priority() {\n    return this._priority;\n  }\n\n  set priority(priority) {\n    if (this._priority != priority) {\n      this._priority = priority;\n\n      this._onPriorityChange(priority);\n    }\n  }\n  /** Get the current value */\n\n\n  get() {\n    const node = getAnimated(this);\n    return node && node.getValue();\n  }\n  /** Create a spring that maps our value to another value */\n\n\n  to() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return G4.to(this, args);\n  }\n  /** @deprecated Use the `to` method instead. */\n\n\n  interpolate() {\n    deprecateInterpolate();\n\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return G4.to(this, args);\n  }\n\n  toJSON() {\n    return this.get();\n  }\n\n  observerAdded(count) {\n    if (count == 1) this._attach();\n  }\n\n  observerRemoved(count) {\n    if (count == 0) this._detach();\n  }\n  /** Called when the first child is added. */\n\n\n  _attach() {}\n  /** Called when the last child is removed. */\n\n\n  _detach() {}\n  /** Tell our children about our new value */\n\n\n  _onChange(value) {\n    let idle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    callFluidObservers(this, {\n      type: \"change\",\n      parent: this,\n      value,\n      idle\n    });\n  }\n  /** Tell our children about our new priority */\n\n\n  _onPriorityChange(priority) {\n    if (!this.idle) {\n      frameLoop.sort(this);\n    }\n\n    callFluidObservers(this, {\n      type: \"priority\",\n      parent: this,\n      priority\n    });\n  }\n\n}; // src/SpringPhase.ts\n\nvar $P = Symbol.for(\"SpringPhase\");\nvar HAS_ANIMATED = 1;\nvar IS_ANIMATING = 2;\nvar IS_PAUSED = 4;\n\nvar hasAnimated = target => (target[$P] & HAS_ANIMATED) > 0;\n\nvar isAnimating = target => (target[$P] & IS_ANIMATING) > 0;\n\nvar isPaused = target => (target[$P] & IS_PAUSED) > 0;\n\nvar setActiveBit = (target, active) => active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;\n\nvar setPausedBit = (target, paused) => paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED; // src/SpringValue.ts\n\n\nvar SpringValue = class extends FrameValue {\n  constructor(arg1, arg2) {\n    super();\n    /** The animation state */\n\n    this.animation = new Animation();\n    /** Some props have customizable default values */\n\n    this.defaultProps = {};\n    /** The state for `runAsync` calls */\n\n    this._state = {\n      paused: false,\n      delayed: false,\n      pauseQueue: /* @__PURE__ */new Set(),\n      resumeQueue: /* @__PURE__ */new Set(),\n      timeouts: /* @__PURE__ */new Set()\n    };\n    /** The promise resolvers of pending `start` calls */\n\n    this._pendingCalls = /* @__PURE__ */new Set();\n    /** The counter for tracking `scheduleProps` calls */\n\n    this._lastCallId = 0;\n    /** The last `scheduleProps` call that changed the `to` prop */\n\n    this._lastToId = 0;\n    this._memoizedDuration = 0;\n\n    if (!is5.und(arg1) || !is5.und(arg2)) {\n      const props = is5.obj(arg1) ? { ...arg1\n      } : { ...arg2,\n        from: arg1\n      };\n\n      if (is5.und(props.default)) {\n        props.default = true;\n      }\n\n      this.start(props);\n    }\n  }\n  /** Equals true when not advancing on each frame. */\n\n\n  get idle() {\n    return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);\n  }\n\n  get goal() {\n    return getFluidValue2(this.animation.to);\n  }\n\n  get velocity() {\n    const node = getAnimated2(this);\n    return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map(node2 => node2.lastVelocity || 0);\n  }\n  /**\n   * When true, this value has been animated at least once.\n   */\n\n\n  get hasAnimated() {\n    return hasAnimated(this);\n  }\n  /**\n   * When true, this value has an unfinished animation,\n   * which is either active or paused.\n   */\n\n\n  get isAnimating() {\n    return isAnimating(this);\n  }\n  /**\n   * When true, all current and future animations are paused.\n   */\n\n\n  get isPaused() {\n    return isPaused(this);\n  }\n  /**\n   *\n   *\n   */\n\n\n  get isDelayed() {\n    return this._state.delayed;\n  }\n  /** Advance the current animation by a number of milliseconds */\n\n\n  advance(dt) {\n    let idle = true;\n    let changed = false;\n    const anim = this.animation;\n    let {\n      toValues\n    } = anim;\n    const {\n      config: config2\n    } = anim;\n    const payload = getPayload(anim.to);\n\n    if (!payload && hasFluidValue(anim.to)) {\n      toValues = toArray2(getFluidValue2(anim.to));\n    }\n\n    anim.values.forEach((node2, i) => {\n      if (node2.done) return;\n      const to2 = // Animated strings always go from 0 to 1.\n      node2.constructor == AnimatedString ? 1 : payload ? payload[i].lastPosition : toValues[i];\n      let finished = anim.immediate;\n      let position = to2;\n\n      if (!finished) {\n        position = node2.lastPosition;\n\n        if (config2.tension <= 0) {\n          node2.done = true;\n          return;\n        }\n\n        let elapsed = node2.elapsedTime += dt;\n        const from = anim.fromValues[i];\n        const v0 = node2.v0 != null ? node2.v0 : node2.v0 = is5.arr(config2.velocity) ? config2.velocity[i] : config2.velocity;\n        let velocity;\n        const precision = config2.precision || (from == to2 ? 5e-3 : Math.min(1, Math.abs(to2 - from) * 1e-3));\n\n        if (!is5.und(config2.duration)) {\n          let p = 1;\n\n          if (config2.duration > 0) {\n            if (this._memoizedDuration !== config2.duration) {\n              this._memoizedDuration = config2.duration;\n\n              if (node2.durationProgress > 0) {\n                node2.elapsedTime = config2.duration * node2.durationProgress;\n                elapsed = node2.elapsedTime += dt;\n              }\n            }\n\n            p = (config2.progress || 0) + elapsed / this._memoizedDuration;\n            p = p > 1 ? 1 : p < 0 ? 0 : p;\n            node2.durationProgress = p;\n          }\n\n          position = from + config2.easing(p) * (to2 - from);\n          velocity = (position - node2.lastPosition) / dt;\n          finished = p == 1;\n        } else if (config2.decay) {\n          const decay = config2.decay === true ? 0.998 : config2.decay;\n          const e = Math.exp(-(1 - decay) * elapsed);\n          position = from + v0 / (1 - decay) * (1 - e);\n          finished = Math.abs(node2.lastPosition - position) <= precision;\n          velocity = v0 * e;\n        } else {\n          velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;\n          const restVelocity = config2.restVelocity || precision / 10;\n          const bounceFactor = config2.clamp ? 0 : config2.bounce;\n          const canBounce = !is5.und(bounceFactor);\n          const isGrowing = from == to2 ? node2.v0 > 0 : from < to2;\n          let isMoving;\n          let isBouncing = false;\n          const step = 1;\n          const numSteps = Math.ceil(dt / step);\n\n          for (let n = 0; n < numSteps; ++n) {\n            isMoving = Math.abs(velocity) > restVelocity;\n\n            if (!isMoving) {\n              finished = Math.abs(to2 - position) <= precision;\n\n              if (finished) {\n                break;\n              }\n            }\n\n            if (canBounce) {\n              isBouncing = position == to2 || position > to2 == isGrowing;\n\n              if (isBouncing) {\n                velocity = -velocity * bounceFactor;\n                position = to2;\n              }\n            }\n\n            const springForce = -config2.tension * 1e-6 * (position - to2);\n            const dampingForce = -config2.friction * 1e-3 * velocity;\n            const acceleration = (springForce + dampingForce) / config2.mass;\n            velocity = velocity + acceleration * step;\n            position = position + velocity * step;\n          }\n        }\n\n        node2.lastVelocity = velocity;\n\n        if (Number.isNaN(position)) {\n          console.warn(`Got NaN while animating:`, this);\n          finished = true;\n        }\n      }\n\n      if (payload && !payload[i].done) {\n        finished = false;\n      }\n\n      if (finished) {\n        node2.done = true;\n      } else {\n        idle = false;\n      }\n\n      if (node2.setValue(position, config2.round)) {\n        changed = true;\n      }\n    });\n    const node = getAnimated2(this);\n    const currVal = node.getValue();\n\n    if (idle) {\n      const finalVal = getFluidValue2(anim.to);\n\n      if ((currVal !== finalVal || changed) && !config2.decay) {\n        node.setValue(finalVal);\n\n        this._onChange(finalVal);\n      } else if (changed && config2.decay) {\n        this._onChange(currVal);\n      }\n\n      this._stop();\n    } else if (changed) {\n      this._onChange(currVal);\n    }\n  }\n  /** Set the current value, while stopping the current animation */\n\n\n  set(value) {\n    raf3.batchedUpdates(() => {\n      this._stop();\n\n      this._focus(value);\n\n      this._set(value);\n    });\n    return this;\n  }\n  /**\n   * Freeze the active animation in time, as well as any updates merged\n   * before `resume` is called.\n   */\n\n\n  pause() {\n    this._update({\n      pause: true\n    });\n  }\n  /** Resume the animation if paused. */\n\n\n  resume() {\n    this._update({\n      pause: false\n    });\n  }\n  /** Skip to the end of the current animation. */\n\n\n  finish() {\n    if (isAnimating(this)) {\n      const {\n        to: to2,\n        config: config2\n      } = this.animation;\n      raf3.batchedUpdates(() => {\n        this._onStart();\n\n        if (!config2.decay) {\n          this._set(to2, false);\n        }\n\n        this._stop();\n      });\n    }\n\n    return this;\n  }\n  /** Push props into the pending queue. */\n\n\n  update(props) {\n    const queue = this.queue || (this.queue = []);\n    queue.push(props);\n    return this;\n  }\n\n  start(to2, arg2) {\n    let queue;\n\n    if (!is5.und(to2)) {\n      queue = [is5.obj(to2) ? to2 : { ...arg2,\n        to: to2\n      }];\n    } else {\n      queue = this.queue || [];\n      this.queue = [];\n    }\n\n    return Promise.all(queue.map(props => {\n      const up = this._update(props);\n\n      return up;\n    })).then(results => getCombinedResult(this, results));\n  }\n  /**\n   * Stop the current animation, and cancel any delayed updates.\n   *\n   * Pass `true` to call `onRest` with `cancelled: true`.\n   */\n\n\n  stop(cancel) {\n    const {\n      to: to2\n    } = this.animation;\n\n    this._focus(this.get());\n\n    stopAsync(this._state, cancel && this._lastCallId);\n    raf3.batchedUpdates(() => this._stop(to2, cancel));\n    return this;\n  }\n  /** Restart the animation. */\n\n\n  reset() {\n    this._update({\n      reset: true\n    });\n  }\n  /** @internal */\n\n\n  eventObserved(event) {\n    if (event.type == \"change\") {\n      this._start();\n    } else if (event.type == \"priority\") {\n      this.priority = event.priority + 1;\n    }\n  }\n  /**\n   * Parse the `to` and `from` range from the given `props` object.\n   *\n   * This also ensures the initial value is available to animated components\n   * during the render phase.\n   */\n\n\n  _prepareNode(props) {\n    const key = this.key || \"\";\n    let {\n      to: to2,\n      from\n    } = props;\n    to2 = is5.obj(to2) ? to2[key] : to2;\n\n    if (to2 == null || isAsyncTo(to2)) {\n      to2 = void 0;\n    }\n\n    from = is5.obj(from) ? from[key] : from;\n\n    if (from == null) {\n      from = void 0;\n    }\n\n    const range = {\n      to: to2,\n      from\n    };\n\n    if (!hasAnimated(this)) {\n      if (props.reverse) [to2, from] = [from, to2];\n      from = getFluidValue2(from);\n\n      if (!is5.und(from)) {\n        this._set(from);\n      } else if (!getAnimated2(this)) {\n        this._set(to2);\n      }\n    }\n\n    return range;\n  }\n  /** Every update is processed by this method before merging. */\n\n\n  _update(_ref2, isLoop) {\n    let { ...props\n    } = _ref2;\n    const {\n      key,\n      defaultProps\n    } = this;\n    if (props.default) Object.assign(defaultProps, getDefaultProps(props, (value, prop) => /^on/.test(prop) ? resolveProp(value, key) : value));\n    mergeActiveFn(this, props, \"onProps\");\n    sendEvent(this, \"onProps\", props, this);\n\n    const range = this._prepareNode(props);\n\n    if (Object.isFrozen(this)) {\n      throw Error(\"Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?\");\n    }\n\n    const state = this._state;\n    return scheduleProps(++this._lastCallId, {\n      key,\n      props,\n      defaultProps,\n      state,\n      actions: {\n        pause: () => {\n          if (!isPaused(this)) {\n            setPausedBit(this, true);\n            flushCalls(state.pauseQueue);\n            sendEvent(this, \"onPause\", getFinishedResult(this, checkFinished(this, this.animation.to)), this);\n          }\n        },\n        resume: () => {\n          if (isPaused(this)) {\n            setPausedBit(this, false);\n\n            if (isAnimating(this)) {\n              this._resume();\n            }\n\n            flushCalls(state.resumeQueue);\n            sendEvent(this, \"onResume\", getFinishedResult(this, checkFinished(this, this.animation.to)), this);\n          }\n        },\n        start: this._merge.bind(this, range)\n      }\n    }).then(result => {\n      if (props.loop && result.finished && !(isLoop && result.noop)) {\n        const nextProps = createLoopUpdate(props);\n\n        if (nextProps) {\n          return this._update(nextProps, true);\n        }\n      }\n\n      return result;\n    });\n  }\n  /** Merge props into the current animation */\n\n\n  _merge(range, props, resolve) {\n    if (props.cancel) {\n      this.stop(true);\n      return resolve(getCancelledResult(this));\n    }\n\n    const hasToProp = !is5.und(range.to);\n    const hasFromProp = !is5.und(range.from);\n\n    if (hasToProp || hasFromProp) {\n      if (props.callId > this._lastToId) {\n        this._lastToId = props.callId;\n      } else {\n        return resolve(getCancelledResult(this));\n      }\n    }\n\n    const {\n      key,\n      defaultProps,\n      animation: anim\n    } = this;\n    const {\n      to: prevTo,\n      from: prevFrom\n    } = anim;\n    let {\n      to: to2 = prevTo,\n      from = prevFrom\n    } = range;\n\n    if (hasFromProp && !hasToProp && (!props.default || is5.und(to2))) {\n      to2 = from;\n    }\n\n    if (props.reverse) [to2, from] = [from, to2];\n    const hasFromChanged = !isEqual(from, prevFrom);\n\n    if (hasFromChanged) {\n      anim.from = from;\n    }\n\n    from = getFluidValue2(from);\n    const hasToChanged = !isEqual(to2, prevTo);\n\n    if (hasToChanged) {\n      this._focus(to2);\n    }\n\n    const hasAsyncTo = isAsyncTo(props.to);\n    const {\n      config: config2\n    } = anim;\n    const {\n      decay,\n      velocity\n    } = config2;\n\n    if (hasToProp || hasFromProp) {\n      config2.velocity = 0;\n    }\n\n    if (props.config && !hasAsyncTo) {\n      mergeConfig(config2, callProp(props.config, key), // Avoid calling the same \"config\" prop twice.\n      props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0);\n    }\n\n    let node = getAnimated2(this);\n\n    if (!node || is5.und(to2)) {\n      return resolve(getFinishedResult(this, true));\n    }\n\n    const reset = // When `reset` is undefined, the `from` prop implies `reset: true`,\n    // except for declarative updates. When `reset` is defined, there\n    // must exist a value to animate from.\n    is5.und(props.reset) ? hasFromProp && !props.default : !is5.und(from) && matchProp(props.reset, key);\n    const value = reset ? from : this.get();\n    const goal = computeGoal(to2);\n    const isAnimatable = is5.num(goal) || is5.arr(goal) || isAnimatedString2(goal);\n    const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));\n\n    if (hasToChanged) {\n      const nodeType = getAnimatedType(to2);\n\n      if (nodeType !== node.constructor) {\n        if (immediate) {\n          node = this._set(goal);\n        } else throw Error(`Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the \"to\" prop suggests`);\n      }\n    }\n\n    const goalType = node.constructor;\n    let started = hasFluidValue(to2);\n    let finished = false;\n\n    if (!started) {\n      const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;\n\n      if (hasToChanged || hasValueChanged) {\n        finished = isEqual(computeGoal(value), goal);\n        started = !finished;\n      }\n\n      if (!isEqual(anim.immediate, immediate) && !immediate || !isEqual(config2.decay, decay) || !isEqual(config2.velocity, velocity)) {\n        started = true;\n      }\n    }\n\n    if (finished && isAnimating(this)) {\n      if (anim.changed && !reset) {\n        started = true;\n      } else if (!started) {\n        this._stop(prevTo);\n      }\n    }\n\n    if (!hasAsyncTo) {\n      if (started || hasFluidValue(prevTo)) {\n        anim.values = node.getPayload();\n        anim.toValues = hasFluidValue(to2) ? null : goalType == AnimatedString ? [1] : toArray2(goal);\n      }\n\n      if (anim.immediate != immediate) {\n        anim.immediate = immediate;\n\n        if (!immediate && !reset) {\n          this._set(prevTo);\n        }\n      }\n\n      if (started) {\n        const {\n          onRest\n        } = anim;\n        each2(ACTIVE_EVENTS, type => mergeActiveFn(this, props, type));\n        const result = getFinishedResult(this, checkFinished(this, prevTo));\n        flushCalls(this._pendingCalls, result);\n\n        this._pendingCalls.add(resolve);\n\n        if (anim.changed) raf3.batchedUpdates(() => {\n          anim.changed = !reset;\n          onRest?.(result, this);\n\n          if (reset) {\n            callProp(defaultProps.onRest, result);\n          } else {\n            anim.onStart?.(result, this);\n          }\n        });\n      }\n    }\n\n    if (reset) {\n      this._set(value);\n    }\n\n    if (hasAsyncTo) {\n      resolve(runAsync(props.to, props, this._state, this));\n    } else if (started) {\n      this._start();\n    } else if (isAnimating(this) && !hasToChanged) {\n      this._pendingCalls.add(resolve);\n    } else {\n      resolve(getNoopResult(value));\n    }\n  }\n  /** Update the `animation.to` value, which might be a `FluidValue` */\n\n\n  _focus(value) {\n    const anim = this.animation;\n\n    if (value !== anim.to) {\n      if (getFluidObservers(this)) {\n        this._detach();\n      }\n\n      anim.to = value;\n\n      if (getFluidObservers(this)) {\n        this._attach();\n      }\n    }\n  }\n\n  _attach() {\n    let priority = 0;\n    const {\n      to: to2\n    } = this.animation;\n\n    if (hasFluidValue(to2)) {\n      addFluidObserver(to2, this);\n\n      if (isFrameValue(to2)) {\n        priority = to2.priority + 1;\n      }\n    }\n\n    this.priority = priority;\n  }\n\n  _detach() {\n    const {\n      to: to2\n    } = this.animation;\n\n    if (hasFluidValue(to2)) {\n      removeFluidObserver(to2, this);\n    }\n  }\n  /**\n   * Update the current value from outside the frameloop,\n   * and return the `Animated` node.\n   */\n\n\n  _set(arg) {\n    let idle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const value = getFluidValue2(arg);\n\n    if (!is5.und(value)) {\n      const oldNode = getAnimated2(this);\n\n      if (!oldNode || !isEqual(value, oldNode.getValue())) {\n        const nodeType = getAnimatedType(value);\n\n        if (!oldNode || oldNode.constructor != nodeType) {\n          setAnimated(this, nodeType.create(value));\n        } else {\n          oldNode.setValue(value);\n        }\n\n        if (oldNode) {\n          raf3.batchedUpdates(() => {\n            this._onChange(value, idle);\n          });\n        }\n      }\n    }\n\n    return getAnimated2(this);\n  }\n\n  _onStart() {\n    const anim = this.animation;\n\n    if (!anim.changed) {\n      anim.changed = true;\n      sendEvent(this, \"onStart\", getFinishedResult(this, checkFinished(this, anim.to)), this);\n    }\n  }\n\n  _onChange(value, idle) {\n    if (!idle) {\n      this._onStart();\n\n      callProp(this.animation.onChange, value, this);\n    }\n\n    callProp(this.defaultProps.onChange, value, this);\n\n    super._onChange(value, idle);\n  } // This method resets the animation state (even if already animating) to\n  // ensure the latest from/to range is used, and it also ensures this spring\n  // is added to the frameloop.\n\n\n  _start() {\n    const anim = this.animation;\n    getAnimated2(this).reset(getFluidValue2(anim.to));\n\n    if (!anim.immediate) {\n      anim.fromValues = anim.values.map(node => node.lastPosition);\n    }\n\n    if (!isAnimating(this)) {\n      setActiveBit(this, true);\n\n      if (!isPaused(this)) {\n        this._resume();\n      }\n    }\n  }\n\n  _resume() {\n    if (G5.skipAnimation) {\n      this.finish();\n    } else {\n      frameLoop2.start(this);\n    }\n  }\n  /**\n   * Exit the frameloop and notify `onRest` listeners.\n   *\n   * Always wrap `_stop` calls with `batchedUpdates`.\n   */\n\n\n  _stop(goal, cancel) {\n    if (isAnimating(this)) {\n      setActiveBit(this, false);\n      const anim = this.animation;\n      each2(anim.values, node => {\n        node.done = true;\n      });\n\n      if (anim.toValues) {\n        anim.onChange = anim.onPause = anim.onResume = void 0;\n      }\n\n      callFluidObservers2(this, {\n        type: \"idle\",\n        parent: this\n      });\n      const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal ?? anim.to));\n      flushCalls(this._pendingCalls, result);\n\n      if (anim.changed) {\n        anim.changed = false;\n        sendEvent(this, \"onRest\", result, this);\n      }\n    }\n  }\n\n};\n\nfunction checkFinished(target, to2) {\n  const goal = computeGoal(to2);\n  const value = computeGoal(target.get());\n  return isEqual(value, goal);\n}\n\nfunction createLoopUpdate(props) {\n  let loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : props.loop;\n  let to2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : props.to;\n  const loopRet = callProp(loop);\n\n  if (loopRet) {\n    const overrides = loopRet !== true && inferTo(loopRet);\n    const reverse = (overrides || props).reverse;\n    const reset = !overrides || overrides.reset;\n    return createUpdate({ ...props,\n      loop,\n      // Avoid updating default props when looping.\n      default: false,\n      // Never loop the `pause` prop.\n      pause: void 0,\n      // For the \"reverse\" prop to loop as expected, the \"to\" prop\n      // must be undefined. The \"reverse\" prop is ignored when the\n      // \"to\" prop is an array or function.\n      to: !reverse || isAsyncTo(to2) ? to2 : void 0,\n      // Ignore the \"from\" prop except on reset.\n      from: reset ? props.from : void 0,\n      reset,\n      // The \"loop\" prop can return a \"useSpring\" props object to\n      // override any of the original props.\n      ...overrides\n    });\n  }\n}\n\nfunction createUpdate(props) {\n  const {\n    to: to2,\n    from\n  } = props = inferTo(props);\n  const keys = /* @__PURE__ */new Set();\n  if (is5.obj(to2)) findDefined(to2, keys);\n  if (is5.obj(from)) findDefined(from, keys);\n  props.keys = keys.size ? Array.from(keys) : null;\n  return props;\n}\n\nfunction declareUpdate(props) {\n  const update2 = createUpdate(props);\n\n  if (is5.und(update2.default)) {\n    update2.default = getDefaultProps(update2);\n  }\n\n  return update2;\n}\n\nfunction findDefined(values, keys) {\n  eachProp3(values, (value, key) => value != null && keys.add(key));\n}\n\nvar ACTIVE_EVENTS = [\"onStart\", \"onRest\", \"onChange\", \"onPause\", \"onResume\"];\n\nfunction mergeActiveFn(target, props, type) {\n  target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;\n}\n\nfunction sendEvent(target, type) {\n  for (var _len4 = arguments.length, args = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n    args[_key4 - 2] = arguments[_key4];\n  }\n\n  target.animation[type]?.(...args);\n  target.defaultProps[type]?.(...args);\n} // src/Controller.ts\n\n\nimport { is as is6, raf as raf4, each as each3, noop, flush as flush2, toArray as toArray3, eachProp as eachProp4, flushCalls as flushCalls2, addFluidObserver as addFluidObserver2 } from \"@react-spring/shared\";\nvar BATCHED_EVENTS = [\"onStart\", \"onChange\", \"onRest\"];\nvar nextId2 = 1;\nvar Controller = class {\n  constructor(props, flush3) {\n    this.id = nextId2++;\n    /** The animated values */\n\n    this.springs = {};\n    /** The queue of props passed to the `update` method. */\n\n    this.queue = [];\n    /** The counter for tracking `scheduleProps` calls */\n\n    this._lastAsyncId = 0;\n    /** The values currently being animated */\n\n    this._active = /* @__PURE__ */new Set();\n    /** The values that changed recently */\n\n    this._changed = /* @__PURE__ */new Set();\n    /** Equals false when `onStart` listeners can be called */\n\n    this._started = false;\n    /** State used by the `runAsync` function */\n\n    this._state = {\n      paused: false,\n      pauseQueue: /* @__PURE__ */new Set(),\n      resumeQueue: /* @__PURE__ */new Set(),\n      timeouts: /* @__PURE__ */new Set()\n    };\n    /** The event queues that are flushed once per frame maximum */\n\n    this._events = {\n      onStart: /* @__PURE__ */new Map(),\n      onChange: /* @__PURE__ */new Map(),\n      onRest: /* @__PURE__ */new Map()\n    };\n    this._onFrame = this._onFrame.bind(this);\n\n    if (flush3) {\n      this._flush = flush3;\n    }\n\n    if (props) {\n      this.start({\n        default: true,\n        ...props\n      });\n    }\n  }\n  /**\n   * Equals `true` when no spring values are in the frameloop, and\n   * no async animation is currently active.\n   */\n\n\n  get idle() {\n    return !this._state.asyncTo && Object.values(this.springs).every(spring => {\n      return spring.idle && !spring.isDelayed && !spring.isPaused;\n    });\n  }\n\n  get item() {\n    return this._item;\n  }\n\n  set item(item) {\n    this._item = item;\n  }\n  /** Get the current values of our springs */\n\n\n  get() {\n    const values = {};\n    this.each((spring, key) => values[key] = spring.get());\n    return values;\n  }\n  /** Set the current values without animating. */\n\n\n  set(values) {\n    for (const key in values) {\n      const value = values[key];\n\n      if (!is6.und(value)) {\n        this.springs[key].set(value);\n      }\n    }\n  }\n  /** Push an update onto the queue of each value. */\n\n\n  update(props) {\n    if (props) {\n      this.queue.push(createUpdate(props));\n    }\n\n    return this;\n  }\n  /**\n   * Start the queued animations for every spring, and resolve the returned\n   * promise once all queued animations have finished or been cancelled.\n   *\n   * When you pass a queue (instead of nothing), that queue is used instead of\n   * the queued animations added with the `update` method, which are left alone.\n   */\n\n\n  start(props) {\n    let {\n      queue\n    } = this;\n\n    if (props) {\n      queue = toArray3(props).map(createUpdate);\n    } else {\n      this.queue = [];\n    }\n\n    if (this._flush) {\n      return this._flush(this, queue);\n    }\n\n    prepareKeys(this, queue);\n    return flushUpdateQueue(this, queue);\n  }\n  /** @internal */\n\n\n  stop(arg, keys) {\n    if (arg !== !!arg) {\n      keys = arg;\n    }\n\n    if (keys) {\n      const springs = this.springs;\n      each3(toArray3(keys), key => springs[key].stop(!!arg));\n    } else {\n      stopAsync(this._state, this._lastAsyncId);\n      this.each(spring => spring.stop(!!arg));\n    }\n\n    return this;\n  }\n  /** Freeze the active animation in time */\n\n\n  pause(keys) {\n    if (is6.und(keys)) {\n      this.start({\n        pause: true\n      });\n    } else {\n      const springs = this.springs;\n      each3(toArray3(keys), key => springs[key].pause());\n    }\n\n    return this;\n  }\n  /** Resume the animation if paused. */\n\n\n  resume(keys) {\n    if (is6.und(keys)) {\n      this.start({\n        pause: false\n      });\n    } else {\n      const springs = this.springs;\n      each3(toArray3(keys), key => springs[key].resume());\n    }\n\n    return this;\n  }\n  /** Call a function once per spring value */\n\n\n  each(iterator) {\n    eachProp4(this.springs, iterator);\n  }\n  /** @internal Called at the end of every animation frame */\n\n\n  _onFrame() {\n    const {\n      onStart,\n      onChange,\n      onRest\n    } = this._events;\n    const active = this._active.size > 0;\n    const changed = this._changed.size > 0;\n\n    if (active && !this._started || changed && !this._started) {\n      this._started = true;\n      flush2(onStart, _ref3 => {\n        let [onStart2, result] = _ref3;\n        result.value = this.get();\n        onStart2(result, this, this._item);\n      });\n    }\n\n    const idle = !active && this._started;\n    const values = changed || idle && onRest.size ? this.get() : null;\n\n    if (changed && onChange.size) {\n      flush2(onChange, _ref4 => {\n        let [onChange2, result] = _ref4;\n        result.value = values;\n        onChange2(result, this, this._item);\n      });\n    }\n\n    if (idle) {\n      this._started = false;\n      flush2(onRest, _ref5 => {\n        let [onRest2, result] = _ref5;\n        result.value = values;\n        onRest2(result, this, this._item);\n      });\n    }\n  }\n  /** @internal */\n\n\n  eventObserved(event) {\n    if (event.type == \"change\") {\n      this._changed.add(event.parent);\n\n      if (!event.idle) {\n        this._active.add(event.parent);\n      }\n    } else if (event.type == \"idle\") {\n      this._active.delete(event.parent);\n    } else return;\n\n    raf4.onFrame(this._onFrame);\n  }\n\n};\n\nfunction flushUpdateQueue(ctrl, queue) {\n  return Promise.all(queue.map(props => flushUpdate(ctrl, props))).then(results => getCombinedResult(ctrl, results));\n}\n\nasync function flushUpdate(ctrl, props, isLoop) {\n  const {\n    keys,\n    to: to2,\n    from,\n    loop,\n    onRest,\n    onResolve\n  } = props;\n  const defaults2 = is6.obj(props.default) && props.default;\n\n  if (loop) {\n    props.loop = false;\n  }\n\n  if (to2 === false) props.to = null;\n  if (from === false) props.from = null;\n  const asyncTo = is6.arr(to2) || is6.fun(to2) ? to2 : void 0;\n\n  if (asyncTo) {\n    props.to = void 0;\n    props.onRest = void 0;\n\n    if (defaults2) {\n      defaults2.onRest = void 0;\n    }\n  } else {\n    each3(BATCHED_EVENTS, key => {\n      const handler = props[key];\n\n      if (is6.fun(handler)) {\n        const queue = ctrl[\"_events\"][key];\n\n        props[key] = _ref6 => {\n          let {\n            finished,\n            cancelled\n          } = _ref6;\n          const result2 = queue.get(handler);\n\n          if (result2) {\n            if (!finished) result2.finished = false;\n            if (cancelled) result2.cancelled = true;\n          } else {\n            queue.set(handler, {\n              value: null,\n              finished: finished || false,\n              cancelled: cancelled || false\n            });\n          }\n        };\n\n        if (defaults2) {\n          defaults2[key] = props[key];\n        }\n      }\n    });\n  }\n\n  const state = ctrl[\"_state\"];\n\n  if (props.pause === !state.paused) {\n    state.paused = props.pause;\n    flushCalls2(props.pause ? state.pauseQueue : state.resumeQueue);\n  } else if (state.paused) {\n    props.pause = true;\n  }\n\n  const promises = (keys || Object.keys(ctrl.springs)).map(key => ctrl.springs[key].start(props));\n  const cancel = props.cancel === true || getDefaultProp(props, \"cancel\") === true;\n\n  if (asyncTo || cancel && state.asyncId) {\n    promises.push(scheduleProps(++ctrl[\"_lastAsyncId\"], {\n      props,\n      state,\n      actions: {\n        pause: noop,\n        resume: noop,\n\n        start(props2, resolve) {\n          if (cancel) {\n            stopAsync(state, ctrl[\"_lastAsyncId\"]);\n            resolve(getCancelledResult(ctrl));\n          } else {\n            props2.onRest = onRest;\n            resolve(runAsync(asyncTo, props2, state, ctrl));\n          }\n        }\n\n      }\n    }));\n  }\n\n  if (state.paused) {\n    await new Promise(resume => {\n      state.resumeQueue.add(resume);\n    });\n  }\n\n  const result = getCombinedResult(ctrl, await Promise.all(promises));\n\n  if (loop && result.finished && !(isLoop && result.noop)) {\n    const nextProps = createLoopUpdate(props, loop, to2);\n\n    if (nextProps) {\n      prepareKeys(ctrl, [nextProps]);\n      return flushUpdate(ctrl, nextProps, true);\n    }\n  }\n\n  if (onResolve) {\n    raf4.batchedUpdates(() => onResolve(result, ctrl, ctrl.item));\n  }\n\n  return result;\n}\n\nfunction getSprings(ctrl, props) {\n  const springs = { ...ctrl.springs\n  };\n\n  if (props) {\n    each3(toArray3(props), props2 => {\n      if (is6.und(props2.keys)) {\n        props2 = createUpdate(props2);\n      }\n\n      if (!is6.obj(props2.to)) {\n        props2 = { ...props2,\n          to: void 0\n        };\n      }\n\n      prepareSprings(springs, props2, key => {\n        return createSpring(key);\n      });\n    });\n  }\n\n  setSprings(ctrl, springs);\n  return springs;\n}\n\nfunction setSprings(ctrl, springs) {\n  eachProp4(springs, (spring, key) => {\n    if (!ctrl.springs[key]) {\n      ctrl.springs[key] = spring;\n      addFluidObserver2(spring, ctrl);\n    }\n  });\n}\n\nfunction createSpring(key, observer) {\n  const spring = new SpringValue();\n  spring.key = key;\n\n  if (observer) {\n    addFluidObserver2(spring, observer);\n  }\n\n  return spring;\n}\n\nfunction prepareSprings(springs, props, create) {\n  if (props.keys) {\n    each3(props.keys, key => {\n      const spring = springs[key] || (springs[key] = create(key));\n      spring[\"_prepareNode\"](props);\n    });\n  }\n}\n\nfunction prepareKeys(ctrl, queue) {\n  each3(queue, props => {\n    prepareSprings(ctrl.springs, props, key => {\n      return createSpring(key, ctrl);\n    });\n  });\n} // src/SpringContext.tsx\n\n\nimport * as React from \"react\";\nimport { useContext } from \"react\";\nimport { useMemoOne } from \"@react-spring/shared\";\n\nvar SpringContext = _ref7 => {\n  let {\n    children,\n    ...props\n  } = _ref7;\n  const inherited = useContext(ctx);\n  const pause = props.pause || !!inherited.pause,\n        immediate = props.immediate || !!inherited.immediate;\n  props = useMemoOne(() => ({\n    pause,\n    immediate\n  }), [pause, immediate]);\n  const {\n    Provider\n  } = ctx;\n  return /* @__PURE__ */React.createElement(Provider, {\n    value: props\n  }, children);\n};\n\nvar ctx = makeContext(SpringContext, {});\nSpringContext.Provider = ctx.Provider;\nSpringContext.Consumer = ctx.Consumer;\n\nfunction makeContext(target, init) {\n  Object.assign(target, React.createContext(init));\n  target.Provider._context = target;\n  target.Consumer._context = target;\n  return target;\n} // src/SpringRef.ts\n\n\nimport { each as each4, is as is7, deprecateDirectCall } from \"@react-spring/shared\";\n\nvar SpringRef = () => {\n  const current = [];\n\n  const SpringRef2 = function (props) {\n    deprecateDirectCall();\n    const results = [];\n    each4(current, (ctrl, i) => {\n      if (is7.und(props)) {\n        results.push(ctrl.start());\n      } else {\n        const update2 = _getProps(props, ctrl, i);\n\n        if (update2) {\n          results.push(ctrl.start(update2));\n        }\n      }\n    });\n    return results;\n  };\n\n  SpringRef2.current = current;\n\n  SpringRef2.add = function (ctrl) {\n    if (!current.includes(ctrl)) {\n      current.push(ctrl);\n    }\n  };\n\n  SpringRef2.delete = function (ctrl) {\n    const i = current.indexOf(ctrl);\n    if (~i) current.splice(i, 1);\n  };\n\n  SpringRef2.pause = function () {\n    each4(current, ctrl => ctrl.pause(...arguments));\n    return this;\n  };\n\n  SpringRef2.resume = function () {\n    each4(current, ctrl => ctrl.resume(...arguments));\n    return this;\n  };\n\n  SpringRef2.set = function (values) {\n    each4(current, (ctrl, i) => {\n      const update2 = is7.fun(values) ? values(i, ctrl) : values;\n\n      if (update2) {\n        ctrl.set(update2);\n      }\n    });\n  };\n\n  SpringRef2.start = function (props) {\n    const results = [];\n    each4(current, (ctrl, i) => {\n      if (is7.und(props)) {\n        results.push(ctrl.start());\n      } else {\n        const update2 = this._getProps(props, ctrl, i);\n\n        if (update2) {\n          results.push(ctrl.start(update2));\n        }\n      }\n    });\n    return results;\n  };\n\n  SpringRef2.stop = function () {\n    each4(current, ctrl => ctrl.stop(...arguments));\n    return this;\n  };\n\n  SpringRef2.update = function (props) {\n    each4(current, (ctrl, i) => ctrl.update(this._getProps(props, ctrl, i)));\n    return this;\n  };\n\n  const _getProps = function (arg, ctrl, index) {\n    return is7.fun(arg) ? arg(index, ctrl) : arg;\n  };\n\n  SpringRef2._getProps = _getProps;\n  return SpringRef2;\n}; // src/hooks/useSprings.ts\n\n\nfunction useSprings(length, props, deps) {\n  const propsFn = is8.fun(props) && props;\n  if (propsFn && !deps) deps = [];\n  const ref = useMemo(() => propsFn || arguments.length == 3 ? SpringRef() : void 0, []);\n  const layoutId = useRef(0);\n  const forceUpdate = useForceUpdate();\n  const state = useMemo(() => ({\n    ctrls: [],\n    queue: [],\n\n    flush(ctrl, updates2) {\n      const springs2 = getSprings(ctrl, updates2);\n      const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some(key => !ctrl.springs[key]);\n      return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise(resolve => {\n        setSprings(ctrl, springs2);\n        state.queue.push(() => {\n          resolve(flushUpdateQueue(ctrl, updates2));\n        });\n        forceUpdate();\n      });\n    }\n\n  }), []);\n  const ctrls = useRef([...state.ctrls]);\n  const updates = [];\n  const prevLength = usePrev(length) || 0;\n  useMemo(() => {\n    each5(ctrls.current.slice(length, prevLength), ctrl => {\n      detachRefs(ctrl, ref);\n      ctrl.stop(true);\n    });\n    ctrls.current.length = length;\n    declareUpdates(prevLength, length);\n  }, [length]);\n  useMemo(() => {\n    declareUpdates(0, Math.min(prevLength, length));\n  }, deps);\n\n  function declareUpdates(startIndex, endIndex) {\n    for (let i = startIndex; i < endIndex; i++) {\n      const ctrl = ctrls.current[i] || (ctrls.current[i] = new Controller(null, state.flush));\n      const update2 = propsFn ? propsFn(i, ctrl) : props[i];\n\n      if (update2) {\n        updates[i] = declareUpdate(update2);\n      }\n    }\n  }\n\n  const springs = ctrls.current.map((ctrl, i) => getSprings(ctrl, updates[i]));\n  const context = useContext2(SpringContext);\n  const prevContext = usePrev(context);\n  const hasContext = context !== prevContext && hasProps(context);\n  useIsomorphicLayoutEffect2(() => {\n    layoutId.current++;\n    state.ctrls = ctrls.current;\n    const {\n      queue\n    } = state;\n\n    if (queue.length) {\n      state.queue = [];\n      each5(queue, cb => cb());\n    }\n\n    each5(ctrls.current, (ctrl, i) => {\n      ref?.add(ctrl);\n\n      if (hasContext) {\n        ctrl.start({\n          default: context\n        });\n      }\n\n      const update2 = updates[i];\n\n      if (update2) {\n        replaceRef(ctrl, update2.ref);\n\n        if (ctrl.ref) {\n          ctrl.queue.push(update2);\n        } else {\n          ctrl.start(update2);\n        }\n      }\n    });\n  });\n  useOnce(() => () => {\n    each5(state.ctrls, ctrl => ctrl.stop(true));\n  });\n  const values = springs.map(x => ({ ...x\n  }));\n  return ref ? [values, ref] : values;\n} // src/hooks/useSpring.ts\n\n\nfunction useSpring(props, deps) {\n  const isFn = is9.fun(props);\n  const [[values], ref] = useSprings(1, isFn ? props : [props], isFn ? deps || [] : deps);\n  return isFn || arguments.length == 2 ? [values, ref] : values;\n} // src/hooks/useSpringRef.ts\n\n\nimport { useState } from \"react\";\n\nvar initSpringRef = () => SpringRef();\n\nvar useSpringRef = () => useState(initSpringRef)[0]; // src/hooks/useSpringValue.ts\n\n\nimport { useConstant, useOnce as useOnce2 } from \"@react-spring/shared\";\n\nvar useSpringValue = (initial, props) => {\n  const springValue = useConstant(() => new SpringValue(initial, props));\n  useOnce2(() => () => {\n    springValue.stop();\n  });\n  return springValue;\n}; // src/hooks/useTrail.ts\n\n\nimport { each as each6, is as is10, useIsomorphicLayoutEffect as useIsomorphicLayoutEffect3 } from \"@react-spring/shared\";\n\nfunction useTrail(length, propsArg, deps) {\n  const propsFn = is10.fun(propsArg) && propsArg;\n  if (propsFn && !deps) deps = [];\n  let reverse = true;\n  let passedRef = void 0;\n  const result = useSprings(length, (i, ctrl) => {\n    const props = propsFn ? propsFn(i, ctrl) : propsArg;\n    passedRef = props.ref;\n    reverse = reverse && props.reverse;\n    return props;\n  }, // Ensure the props function is called when no deps exist.\n  // This works around the 3 argument rule.\n  deps || [{}]);\n  useIsomorphicLayoutEffect3(() => {\n    each6(result[1].current, (ctrl, i) => {\n      const parent = result[1].current[i + (reverse ? 1 : -1)];\n      replaceRef(ctrl, passedRef);\n\n      if (ctrl.ref) {\n        if (parent) {\n          ctrl.update({\n            to: parent.springs\n          });\n        }\n\n        return;\n      }\n\n      if (parent) {\n        ctrl.start({\n          to: parent.springs\n        });\n      } else {\n        ctrl.start();\n      }\n    });\n  }, deps);\n\n  if (propsFn || arguments.length == 3) {\n    const ref = passedRef ?? result[1];\n\n    ref[\"_getProps\"] = (propsArg2, ctrl, i) => {\n      const props = is10.fun(propsArg2) ? propsArg2(i, ctrl) : propsArg2;\n\n      if (props) {\n        const parent = ref.current[i + (props.reverse ? 1 : -1)];\n        if (parent) props.to = parent.springs;\n        return props;\n      }\n    };\n\n    return result;\n  }\n\n  return result[0];\n} // src/hooks/useTransition.tsx\n\n\nimport * as React2 from \"react\";\nimport { useContext as useContext3, useRef as useRef2, useMemo as useMemo2 } from \"react\";\nimport { is as is11, toArray as toArray4, useForceUpdate as useForceUpdate2, useOnce as useOnce3, usePrev as usePrev2, each as each7, useIsomorphicLayoutEffect as useIsomorphicLayoutEffect4 } from \"@react-spring/shared\";\n\nfunction useTransition(data, props, deps) {\n  const propsFn = is11.fun(props) && props;\n  const {\n    reset,\n    sort,\n    trail = 0,\n    expires = true,\n    exitBeforeEnter = false,\n    onDestroyed,\n    ref: propsRef,\n    config: propsConfig\n  } = propsFn ? propsFn() : props;\n  const ref = useMemo2(() => propsFn || arguments.length == 3 ? SpringRef() : void 0, []);\n  const items = toArray4(data);\n  const transitions = [];\n  const usedTransitions = useRef2(null);\n  const prevTransitions = reset ? null : usedTransitions.current;\n  useIsomorphicLayoutEffect4(() => {\n    usedTransitions.current = transitions;\n  });\n  useOnce3(() => {\n    each7(transitions, t => {\n      ref?.add(t.ctrl);\n      t.ctrl.ref = ref;\n    });\n    return () => {\n      each7(usedTransitions.current, t => {\n        if (t.expired) {\n          clearTimeout(t.expirationId);\n        }\n\n        detachRefs(t.ctrl, ref);\n        t.ctrl.stop(true);\n      });\n    };\n  });\n  const keys = getKeys(items, propsFn ? propsFn() : props, prevTransitions);\n  const expired = reset && usedTransitions.current || [];\n  useIsomorphicLayoutEffect4(() => each7(expired, _ref8 => {\n    let {\n      ctrl,\n      item,\n      key\n    } = _ref8;\n    detachRefs(ctrl, ref);\n    callProp(onDestroyed, item, key);\n  }));\n  const reused = [];\n  if (prevTransitions) each7(prevTransitions, (t, i) => {\n    if (t.expired) {\n      clearTimeout(t.expirationId);\n      expired.push(t);\n    } else {\n      i = reused[i] = keys.indexOf(t.key);\n      if (~i) transitions[i] = t;\n    }\n  });\n  each7(items, (item, i) => {\n    if (!transitions[i]) {\n      transitions[i] = {\n        key: keys[i],\n        item,\n        phase: \"mount\"\n        /* MOUNT */\n        ,\n        ctrl: new Controller()\n      };\n      transitions[i].ctrl.item = item;\n    }\n  });\n\n  if (reused.length) {\n    let i = -1;\n    const {\n      leave\n    } = propsFn ? propsFn() : props;\n    each7(reused, (keyIndex, prevIndex) => {\n      const t = prevTransitions[prevIndex];\n\n      if (~keyIndex) {\n        i = transitions.indexOf(t);\n        transitions[i] = { ...t,\n          item: items[keyIndex]\n        };\n      } else if (leave) {\n        transitions.splice(++i, 0, t);\n      }\n    });\n  }\n\n  if (is11.fun(sort)) {\n    transitions.sort((a, b) => sort(a.item, b.item));\n  }\n\n  let delay = -trail;\n  const forceUpdate = useForceUpdate2();\n  const defaultProps = getDefaultProps(props);\n  const changes = /* @__PURE__ */new Map();\n  const exitingTransitions = useRef2( /* @__PURE__ */new Map());\n  const forceChange = useRef2(false);\n  each7(transitions, (t, i) => {\n    const key = t.key;\n    const prevPhase = t.phase;\n    const p = propsFn ? propsFn() : props;\n    let to2;\n    let phase;\n    const propsDelay = callProp(p.delay || 0, key);\n\n    if (prevPhase == \"mount\"\n    /* MOUNT */\n    ) {\n      to2 = p.enter;\n      phase = \"enter\"\n      /* ENTER */\n      ;\n    } else {\n      const isLeave = keys.indexOf(key) < 0;\n\n      if (prevPhase != \"leave\"\n      /* LEAVE */\n      ) {\n        if (isLeave) {\n          to2 = p.leave;\n          phase = \"leave\"\n          /* LEAVE */\n          ;\n        } else if (to2 = p.update) {\n          phase = \"update\"\n          /* UPDATE */\n          ;\n        } else return;\n      } else if (!isLeave) {\n        to2 = p.enter;\n        phase = \"enter\"\n        /* ENTER */\n        ;\n      } else return;\n    }\n\n    to2 = callProp(to2, t.item, i);\n    to2 = is11.obj(to2) ? inferTo(to2) : {\n      to: to2\n    };\n\n    if (!to2.config) {\n      const config2 = propsConfig || defaultProps.config;\n      to2.config = callProp(config2, t.item, i, phase);\n    }\n\n    delay += trail;\n    const payload = { ...defaultProps,\n      // we need to add our props.delay value you here.\n      delay: propsDelay + delay,\n      ref: propsRef,\n      immediate: p.immediate,\n      // This prevents implied resets.\n      reset: false,\n      // Merge any phase-specific props.\n      ...to2\n    };\n\n    if (phase == \"enter\"\n    /* ENTER */\n    && is11.und(payload.from)) {\n      const p2 = propsFn ? propsFn() : props;\n      const from = is11.und(p2.initial) || prevTransitions ? p2.from : p2.initial;\n      payload.from = callProp(from, t.item, i);\n    }\n\n    const {\n      onResolve\n    } = payload;\n\n    payload.onResolve = result => {\n      callProp(onResolve, result);\n      const transitions2 = usedTransitions.current;\n      const t2 = transitions2.find(t3 => t3.key === key);\n      if (!t2) return;\n\n      if (result.cancelled && t2.phase != \"update\"\n      /* UPDATE */\n      ) {\n        return;\n      }\n\n      if (t2.ctrl.idle) {\n        const idle = transitions2.every(t3 => t3.ctrl.idle);\n\n        if (t2.phase == \"leave\"\n        /* LEAVE */\n        ) {\n          const expiry = callProp(expires, t2.item);\n\n          if (expiry !== false) {\n            const expiryMs = expiry === true ? 0 : expiry;\n            t2.expired = true;\n\n            if (!idle && expiryMs > 0) {\n              if (expiryMs <= 2147483647) t2.expirationId = setTimeout(forceUpdate, expiryMs);\n              return;\n            }\n          }\n        }\n\n        if (idle && transitions2.some(t3 => t3.expired)) {\n          exitingTransitions.current.delete(t2);\n\n          if (exitBeforeEnter) {\n            forceChange.current = true;\n          }\n\n          forceUpdate();\n        }\n      }\n    };\n\n    const springs = getSprings(t.ctrl, payload);\n\n    if (phase === \"leave\"\n    /* LEAVE */\n    && exitBeforeEnter) {\n      exitingTransitions.current.set(t, {\n        phase,\n        springs,\n        payload\n      });\n    } else {\n      changes.set(t, {\n        phase,\n        springs,\n        payload\n      });\n    }\n  });\n  const context = useContext3(SpringContext);\n  const prevContext = usePrev2(context);\n  const hasContext = context !== prevContext && hasProps(context);\n  useIsomorphicLayoutEffect4(() => {\n    if (hasContext) {\n      each7(transitions, t => {\n        t.ctrl.start({\n          default: context\n        });\n      });\n    }\n  }, [context]);\n  each7(changes, (_, t) => {\n    if (exitingTransitions.current.size) {\n      const ind = transitions.findIndex(state => state.key === t.key);\n      transitions.splice(ind, 1);\n    }\n  });\n  useIsomorphicLayoutEffect4(() => {\n    each7(exitingTransitions.current.size ? exitingTransitions.current : changes, (_ref9, t) => {\n      let {\n        phase,\n        payload\n      } = _ref9;\n      const {\n        ctrl\n      } = t;\n      t.phase = phase;\n      ref?.add(ctrl);\n\n      if (hasContext && phase == \"enter\"\n      /* ENTER */\n      ) {\n        ctrl.start({\n          default: context\n        });\n      }\n\n      if (payload) {\n        replaceRef(ctrl, payload.ref);\n\n        if ((ctrl.ref || ref) && !forceChange.current) {\n          ctrl.update(payload);\n        } else {\n          ctrl.start(payload);\n\n          if (forceChange.current) {\n            forceChange.current = false;\n          }\n        }\n      }\n    });\n  }, reset ? void 0 : deps);\n\n  const renderTransitions = render => /* @__PURE__ */React2.createElement(React2.Fragment, null, transitions.map((t, i) => {\n    const {\n      springs\n    } = changes.get(t) || t.ctrl;\n    const elem = render({ ...springs\n    }, t.item, t, i);\n    return elem && elem.type ? /* @__PURE__ */React2.createElement(elem.type, { ...elem.props,\n      key: is11.str(t.key) || is11.num(t.key) ? t.key : t.ctrl.id,\n      ref: elem.ref\n    }) : elem;\n  }));\n\n  return ref ? [renderTransitions, ref] : renderTransitions;\n}\n\nvar nextKey = 1;\n\nfunction getKeys(items, _ref10, prevTransitions) {\n  let {\n    key,\n    keys = key\n  } = _ref10;\n\n  if (keys === null) {\n    const reused = /* @__PURE__ */new Set();\n    return items.map(item => {\n      const t = prevTransitions && prevTransitions.find(t2 => t2.item === item && t2.phase !== \"leave\"\n      /* LEAVE */\n      && !reused.has(t2));\n\n      if (t) {\n        reused.add(t);\n        return t.key;\n      }\n\n      return nextKey++;\n    });\n  }\n\n  return is11.und(keys) ? items : is11.fun(keys) ? items.map(keys) : toArray4(keys);\n} // src/hooks/useScroll.ts\n\n\nimport { each as each8, onScroll, useIsomorphicLayoutEffect as useIsomorphicLayoutEffect5 } from \"@react-spring/shared\";\n\nvar useScroll = function () {\n  let {\n    container,\n    ...springOptions\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [scrollValues, api] = useSpring(() => ({\n    scrollX: 0,\n    scrollY: 0,\n    scrollXProgress: 0,\n    scrollYProgress: 0,\n    ...springOptions\n  }), []);\n  useIsomorphicLayoutEffect5(() => {\n    const cleanupScroll = onScroll(_ref11 => {\n      let {\n        x,\n        y\n      } = _ref11;\n      api.start({\n        scrollX: x.current,\n        scrollXProgress: x.progress,\n        scrollY: y.current,\n        scrollYProgress: y.progress\n      });\n    }, {\n      container: container?.current || void 0\n    });\n    return () => {\n      each8(Object.values(scrollValues), value => value.stop());\n      cleanupScroll();\n    };\n  }, []);\n  return scrollValues;\n}; // src/hooks/useResize.ts\n\n\nimport { onResize, each as each9, useIsomorphicLayoutEffect as useIsomorphicLayoutEffect6 } from \"@react-spring/shared\";\n\nvar useResize = _ref12 => {\n  let {\n    container,\n    ...springOptions\n  } = _ref12;\n  const [sizeValues, api] = useSpring(() => ({\n    width: 0,\n    height: 0,\n    ...springOptions\n  }), []);\n  useIsomorphicLayoutEffect6(() => {\n    const cleanupScroll = onResize(_ref13 => {\n      let {\n        width,\n        height\n      } = _ref13;\n      api.start({\n        width,\n        height,\n        immediate: sizeValues.width.get() === 0 || sizeValues.height.get() === 0\n      });\n    }, {\n      container: container?.current || void 0\n    });\n    return () => {\n      each9(Object.values(sizeValues), value => value.stop());\n      cleanupScroll();\n    };\n  }, []);\n  return sizeValues;\n}; // src/hooks/useInView.ts\n\n\nimport { useRef as useRef3, useState as useState2 } from \"react\";\nimport { is as is12, useIsomorphicLayoutEffect as useIsomorphicLayoutEffect7 } from \"@react-spring/shared\";\nvar defaultThresholdOptions = {\n  any: 0,\n  all: 1\n};\n\nfunction useInView(props, args) {\n  const [isInView, setIsInView] = useState2(false);\n  const ref = useRef3();\n  const propsFn = is12.fun(props) && props;\n  const springsProps = propsFn ? propsFn() : {};\n  const {\n    to: to2 = {},\n    from = {},\n    ...restSpringProps\n  } = springsProps;\n  const intersectionArguments = propsFn ? args : props;\n  const [springs, api] = useSpring(() => ({\n    from,\n    ...restSpringProps\n  }), []);\n  useIsomorphicLayoutEffect7(() => {\n    const element = ref.current;\n    const {\n      root,\n      once,\n      amount = \"any\",\n      ...restArgs\n    } = intersectionArguments ?? {};\n    if (!element || once && isInView || typeof IntersectionObserver === \"undefined\") return;\n    const activeIntersections = /* @__PURE__ */new WeakMap();\n\n    const onEnter = () => {\n      if (to2) {\n        api.start(to2);\n      }\n\n      setIsInView(true);\n\n      const cleanup = () => {\n        if (from) {\n          api.start(from);\n        }\n\n        setIsInView(false);\n      };\n\n      return once ? void 0 : cleanup;\n    };\n\n    const handleIntersection = entries => {\n      entries.forEach(entry => {\n        const onLeave = activeIntersections.get(entry.target);\n\n        if (entry.isIntersecting === Boolean(onLeave)) {\n          return;\n        }\n\n        if (entry.isIntersecting) {\n          const newOnLeave = onEnter();\n\n          if (is12.fun(newOnLeave)) {\n            activeIntersections.set(entry.target, newOnLeave);\n          } else {\n            observer.unobserve(entry.target);\n          }\n        } else if (onLeave) {\n          onLeave();\n          activeIntersections.delete(entry.target);\n        }\n      });\n    };\n\n    const observer = new IntersectionObserver(handleIntersection, {\n      root: root && root.current || void 0,\n      threshold: typeof amount === \"number\" || Array.isArray(amount) ? amount : defaultThresholdOptions[amount],\n      ...restArgs\n    });\n    observer.observe(element);\n    return () => observer.unobserve(element);\n  }, [intersectionArguments]);\n\n  if (propsFn) {\n    return [ref, springs];\n  }\n\n  return [ref, isInView];\n} // src/components/Spring.tsx\n\n\nfunction Spring(_ref14) {\n  let {\n    children,\n    ...props\n  } = _ref14;\n  return children(useSpring(props));\n} // src/components/Trail.tsx\n\n\nimport { is as is13 } from \"@react-spring/shared\";\n\nfunction Trail(_ref15) {\n  let {\n    items,\n    children,\n    ...props\n  } = _ref15;\n  const trails = useTrail(items.length, props);\n  return items.map((item, index) => {\n    const result = children(item, index);\n    return is13.fun(result) ? result(trails[index]) : result;\n  });\n} // src/components/Transition.tsx\n\n\nfunction Transition(_ref16) {\n  let {\n    items,\n    children,\n    ...props\n  } = _ref16;\n  return useTransition(items, props)(children);\n} // src/interpolate.ts\n\n\nimport { deprecateInterpolate as deprecateInterpolate2 } from \"@react-spring/shared\"; // src/Interpolation.ts\n\nimport { is as is14, raf as raf5, each as each10, isEqual as isEqual2, toArray as toArray5, frameLoop as frameLoop3, getFluidValue as getFluidValue3, createInterpolator, Globals as G6, callFluidObservers as callFluidObservers3, addFluidObserver as addFluidObserver3, removeFluidObserver as removeFluidObserver2, hasFluidValue as hasFluidValue2 } from \"@react-spring/shared\";\nimport { getAnimated as getAnimated3, setAnimated as setAnimated2, getAnimatedType as getAnimatedType2, getPayload as getPayload2 } from \"@react-spring/animated\";\nvar Interpolation = class extends FrameValue {\n  constructor(source, args) {\n    super();\n    this.source = source;\n    /** Equals false when in the frameloop */\n\n    this.idle = true;\n    /** The inputs which are currently animating */\n\n    this._active = /* @__PURE__ */new Set();\n    this.calc = createInterpolator(...args);\n\n    const value = this._get();\n\n    const nodeType = getAnimatedType2(value);\n    setAnimated2(this, nodeType.create(value));\n  }\n\n  advance(_dt) {\n    const value = this._get();\n\n    const oldValue = this.get();\n\n    if (!isEqual2(value, oldValue)) {\n      getAnimated3(this).setValue(value);\n\n      this._onChange(value, this.idle);\n    }\n\n    if (!this.idle && checkIdle(this._active)) {\n      becomeIdle(this);\n    }\n  }\n\n  _get() {\n    const inputs = is14.arr(this.source) ? this.source.map(getFluidValue3) : toArray5(getFluidValue3(this.source));\n    return this.calc(...inputs);\n  }\n\n  _start() {\n    if (this.idle && !checkIdle(this._active)) {\n      this.idle = false;\n      each10(getPayload2(this), node => {\n        node.done = false;\n      });\n\n      if (G6.skipAnimation) {\n        raf5.batchedUpdates(() => this.advance());\n        becomeIdle(this);\n      } else {\n        frameLoop3.start(this);\n      }\n    }\n  } // Observe our sources only when we're observed.\n\n\n  _attach() {\n    let priority = 1;\n    each10(toArray5(this.source), source => {\n      if (hasFluidValue2(source)) {\n        addFluidObserver3(source, this);\n      }\n\n      if (isFrameValue(source)) {\n        if (!source.idle) {\n          this._active.add(source);\n        }\n\n        priority = Math.max(priority, source.priority + 1);\n      }\n    });\n    this.priority = priority;\n\n    this._start();\n  } // Stop observing our sources once we have no observers.\n\n\n  _detach() {\n    each10(toArray5(this.source), source => {\n      if (hasFluidValue2(source)) {\n        removeFluidObserver2(source, this);\n      }\n    });\n\n    this._active.clear();\n\n    becomeIdle(this);\n  }\n  /** @internal */\n\n\n  eventObserved(event) {\n    if (event.type == \"change\") {\n      if (event.idle) {\n        this.advance();\n      } else {\n        this._active.add(event.parent);\n\n        this._start();\n      }\n    } else if (event.type == \"idle\") {\n      this._active.delete(event.parent);\n    } else if (event.type == \"priority\") {\n      this.priority = toArray5(this.source).reduce((highest, parent) => Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1), 0);\n    }\n  }\n\n};\n\nfunction isIdle(source) {\n  return source.idle !== false;\n}\n\nfunction checkIdle(active) {\n  return !active.size || Array.from(active).every(isIdle);\n}\n\nfunction becomeIdle(self) {\n  if (!self.idle) {\n    self.idle = true;\n    each10(getPayload2(self), node => {\n      node.done = true;\n    });\n    callFluidObservers3(self, {\n      type: \"idle\",\n      parent: self\n    });\n  }\n} // src/interpolate.ts\n\n\nvar to = function (source) {\n  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    args[_key5 - 1] = arguments[_key5];\n  }\n\n  return new Interpolation(source, args);\n};\n\nvar interpolate = function (source) {\n  for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    args[_key6 - 1] = arguments[_key6];\n  }\n\n  return deprecateInterpolate2(), new Interpolation(source, args);\n}; // src/globals.ts\n\n\nimport { Globals, frameLoop as frameLoop4, createStringInterpolator } from \"@react-spring/shared\";\nGlobals.assign({\n  createStringInterpolator,\n  to: (source, args) => new Interpolation(source, args)\n});\nvar update = frameLoop4.advance; // src/index.ts\n\nimport { createInterpolator as createInterpolator2, useIsomorphicLayoutEffect as useIsomorphicLayoutEffect8, useReducedMotion, easings as easings2 } from \"@react-spring/shared\";\nexport * from \"@react-spring/types\";\nexport { BailSignal, Controller, FrameValue, Globals, Interpolation, Spring, SpringContext, SpringRef, SpringValue, Trail, Transition, config, createInterpolator2 as createInterpolator, easings2 as easings, inferTo, interpolate, to, update, useChain, useInView, useIsomorphicLayoutEffect8 as useIsomorphicLayoutEffect, useReducedMotion, useResize, useScroll, useSpring, useSpringRef, useSpringValue, useSprings, useTrail, useTransition };","map":{"version":3,"mappings":"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","names":["each","useIsomorphicLayoutEffect","is","toArray","eachProp","getFluidValue","isAnimatedString","Globals","G","callProp","value","args","fun","matchProp","key","includes","resolveProp","prop","obj","getDefaultProp","props","default","noopTransform","getDefaultProps","transform","keys","DEFAULT_PROPS","Object","defaults","und","RESERVED_PROPS","config","from","to","ref","loop","reset","pause","cancel","reverse","immediate","delay","onProps","onStart","onChange","onPause","onResume","onRest","onResolve","items","trail","sort","expires","initial","enter","update","leave","children","onDestroyed","callId","parentId","getForwardProps","forward","count","inferTo","out","val","computeGoal","arr","map","createStringInterpolator","range","output","hasProps","_","isAsyncTo","detachRefs","ctrl","delete","replaceRef","add","useChain","refs","timeSteps","timeFrame","prevDelay","i","controllers","current","length","isNaN","queue","memoizedDelayProp","start","p","Promise","resolve","queues","q","then","push","all","useContext","useMemo","useRef","usePrev","useOnce","useForceUpdate","raf","isEqual","frameLoop","flushCalls","callFluidObservers","hasFluidValue","addFluidObserver","removeFluidObserver","getFluidObservers","AnimatedValue","AnimatedString","getPayload","getAnimated","setAnimated","getAnimatedType","easings","tension","friction","gentle","wobbly","stiff","slow","molasses","mass","damping","easing","linear","clamp","AnimationConfig","constructor","velocity","assign","mergeConfig","newConfig","defaultConfig","sanitizeConfig","frequency","Math","pow","PI","decay","duration","isTensionConfig","emptyArray","Animation","changed","values","toValues","fromValues","scheduleProps","defaultProps","state","actions","reject","timeout","paused","resumeQueue","resume","timeouts","time","now","skipAnimation","delayed","setTimeout","pauseQueue","cancelId","err","flush","getCombinedResult","target","results","some","result","cancelled","getCancelledResult","get","every","noop","getNoopResult","getFinishedResult","finished","runAsync","asyncTo","prevTo","promise","prevPromise","asyncId","preventBail","bail","bailPromise","bailIfEnded","bailSignal","bailResult","animate","arg1","arg2","BailSignal","skipAnimationSignal","SkipAnimationSignal","stopAsync","animating","stop","bind","batchedUpdates","item","t","clear","Error","deprecateInterpolate","FluidValue","isFrameValue","FrameValue","nextId","arguments","id","_priority","priority","_onPriorityChange","node","getValue","interpolate","toJSON","observerAdded","_attach","observerRemoved","_detach","_onChange","idle","type","parent","$P","Symbol","for","HAS_ANIMATED","IS_ANIMATING","IS_PAUSED","hasAnimated","isAnimating","isPaused","setActiveBit","active","setPausedBit","SpringValue","animation","_state","Set","_pendingCalls","_lastCallId","_lastToId","_memoizedDuration","goal","lastVelocity","isDelayed","advance","dt","anim","payload","forEach","done","lastPosition","position","elapsed","elapsedTime","v0","precision","min","abs","durationProgress","progress","e","exp","restVelocity","bounceFactor","bounce","canBounce","isGrowing","isMoving","isBouncing","step","numSteps","ceil","n","springForce","dampingForce","acceleration","Number","console","warn","setValue","round","currVal","finalVal","_stop","set","_focus","_set","_update","finish","_onStart","up","eventObserved","event","_start","_prepareNode","isLoop","test","mergeActiveFn","sendEvent","isFrozen","checkFinished","_resume","_merge","nextProps","createLoopUpdate","hasToProp","hasFromProp","prevFrom","hasFromChanged","hasToChanged","hasAsyncTo","isAnimatable","num","nodeType","name","goalType","started","hasValueChanged","ACTIVE_EVENTS","arg","oldNode","create","loopRet","overrides","createUpdate","findDefined","size","Array","declareUpdate","BATCHED_EVENTS","Controller","springs","_lastAsyncId","_active","_changed","_started","_events","Map","_onFrame","_flush","spring","_item","prepareKeys","flushUpdateQueue","iterator","onFrame","flushUpdate","handler","promises","getSprings","prepareSprings","createSpring","setSprings","observer","React","useMemoOne","SpringContext","inherited","ctx","Provider","createElement","makeContext","Consumer","init","createContext","_context","deprecateDirectCall","SpringRef","_getProps","indexOf","splice","index","useSprings","deps","propsFn","layoutId","forceUpdate","ctrls","updates","canFlushSync","prevLength","slice","declareUpdates","startIndex","endIndex","context","prevContext","hasContext","cb","x","useSpring","isFn","useState","initSpringRef","useSpringRef","useConstant","useSpringValue","springValue","useTrail","propsArg","passedRef","useTransition","data","exitBeforeEnter","propsRef","propsConfig","transitions","usedTransitions","prevTransitions","expired","clearTimeout","expirationId","getKeys","reused","phase","keyIndex","prevIndex","a","b","changes","exitingTransitions","forceChange","prevPhase","propsDelay","isLeave","find","expiry","expiryMs","ind","findIndex","renderTransitions","render","React2","Fragment","elem","str","nextKey","has","onScroll","useScroll","container","springOptions","scrollValues","api","scrollX","scrollY","scrollXProgress","scrollYProgress","cleanupScroll","y","onResize","useResize","sizeValues","width","height","defaultThresholdOptions","any","useInView","isInView","setIsInView","springsProps","restSpringProps","intersectionArguments","element","root","once","amount","restArgs","IntersectionObserver","activeIntersections","WeakMap","onEnter","cleanup","handleIntersection","entries","entry","onLeave","isIntersecting","Boolean","newOnLeave","unobserve","threshold","isArray","observe","Spring","Trail","trails","Transition","createInterpolator","Interpolation","source","calc","_get","_dt","oldValue","checkIdle","becomeIdle","inputs","max","reduce","highest","isIdle","self","useReducedMotion"],"ignoreList":[],"sources":["C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\hooks\\useChain.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\helpers.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\hooks\\useSpring.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\hooks\\useSprings.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\SpringValue.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\AnimationConfig.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\constants.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\Animation.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\scheduleProps.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\runAsync.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\AnimationResult.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\FrameValue.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\SpringPhase.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\Controller.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\SpringContext.tsx","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\SpringRef.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\hooks\\useSpringRef.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\hooks\\useSpringValue.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\hooks\\useTrail.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\hooks\\useTransition.tsx","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\hooks\\useScroll.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\hooks\\useResize.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\hooks\\useInView.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\components\\Spring.tsx","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\components\\Trail.tsx","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\components\\Transition.tsx","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\interpolate.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\Interpolation.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\globals.ts","C:\\Users\\ANDRIAM'Hajatiana\\Desktop\\portfolio\\portfolio-starter\\node_modules\\@react-spring\\core\\src\\index.ts"],"sourcesContent":["import { each, useIsomorphicLayoutEffect } from '@react-spring/shared'\nimport { SpringRef } from '../SpringRef'\nimport { callProp } from '../helpers'\n\n/**\n * Used to orchestrate animation hooks in sequence with one another.\n * This is best used when you specifically want to orchestrate different\n * types of animation hook e.g. `useSpring` & `useTransition` in\n * sequence as opposed to multiple `useSpring` hooks.\n *\n *\n * ```jsx\n * export const MyComponent = () => {\n *  //...\n *  useChain([springRef, transitionRef])\n *  //...\n * }\n * ```\n *\n * @param refs – An array of `SpringRef`s.\n * @param timeSteps – Optional array of numbers that define the\n * delay between each animation from 0-1. The length should correlate\n * to the length of `refs`.\n * @param timeFrame – Optional number that defines the total duration\n *\n * @public\n */\nexport function useChain(\n  refs: ReadonlyArray<SpringRef>,\n  timeSteps?: number[],\n  timeFrame = 1000\n) {\n  useIsomorphicLayoutEffect(() => {\n    if (timeSteps) {\n      let prevDelay = 0\n      each(refs, (ref, i) => {\n        const controllers = ref.current\n        if (controllers.length) {\n          let delay = timeFrame * timeSteps[i]\n\n          // Use the previous delay if none exists.\n          if (isNaN(delay)) delay = prevDelay\n          else prevDelay = delay\n\n          each(controllers, ctrl => {\n            each(ctrl.queue, props => {\n              // memoizing stops recursion https://github.com/pmndrs/react-spring/issues/1367\n              const memoizedDelayProp = props.delay\n              props.delay = key => delay + callProp(memoizedDelayProp || 0, key)\n            })\n          })\n\n          ref.start()\n        }\n      })\n    } else {\n      let p: Promise<any> = Promise.resolve()\n      each(refs, ref => {\n        const controllers = ref.current\n        if (controllers.length) {\n          // Take the queue of each controller\n          const queues = controllers.map(ctrl => {\n            const q = ctrl.queue\n            ctrl.queue = []\n            return q\n          })\n\n          // Apply the queue when the previous ref stops animating\n          p = p.then(() => {\n            each(controllers, (ctrl, i) =>\n              each(queues[i] || [], update => ctrl.queue.push(update))\n            )\n            return Promise.all(ref.start())\n          })\n        }\n      })\n    }\n  })\n}\n","import {\n  is,\n  toArray,\n  eachProp,\n  getFluidValue,\n  isAnimatedString,\n  FluidValue,\n  Globals as G,\n} from '@react-spring/shared'\nimport { AnyFn, OneOrMore, Lookup } from '@react-spring/types'\nimport { ReservedProps, ForwardProps, InferTo } from './types'\nimport type { Controller } from './Controller'\nimport type { SpringRef } from './SpringRef'\n\nexport function callProp<T>(\n  value: T,\n  ...args: T extends AnyFn ? Parameters<T> : unknown[]\n): T extends AnyFn<any, infer U> ? U : T {\n  return is.fun(value) ? value(...args) : value\n}\n\n/** Try to coerce the given value into a boolean using the given key */\nexport const matchProp = (\n  value: boolean | OneOrMore<string> | ((key: any) => boolean) | undefined,\n  key: string | undefined\n) =>\n  value === true ||\n  !!(\n    key &&\n    value &&\n    (is.fun(value) ? value(key) : toArray(value).includes(key))\n  )\n\nexport const resolveProp = <T>(\n  prop: T | Lookup<T> | undefined,\n  key: string | undefined\n) => (is.obj(prop) ? key && (prop as any)[key] : prop)\n\nexport const concatFn = <T extends AnyFn>(first: T | undefined, last: T) =>\n  first ? (...args: Parameters<T>) => (first(...args), last(...args)) : last\n\n/** Returns `true` if the given prop is having its default value set. */\nexport const hasDefaultProp = <T extends Lookup>(props: T, key: keyof T) =>\n  !is.und(getDefaultProp(props, key))\n\n/** Get the default value being set for the given `key` */\nexport const getDefaultProp = <T extends Lookup, P extends keyof T>(\n  props: T,\n  key: P\n): T[P] =>\n  props.default === true\n    ? props[key]\n    : props.default\n    ? props.default[key]\n    : undefined\n\nconst noopTransform = (value: any) => value\n\n/**\n * Extract the default props from an update.\n *\n * When the `default` prop is falsy, this function still behaves as if\n * `default: true` was used. The `default` prop is always respected when\n * truthy.\n */\nexport const getDefaultProps = <T extends Lookup>(\n  props: Lookup,\n  transform: (value: any, key: string) => any = noopTransform\n): T => {\n  let keys: readonly string[] = DEFAULT_PROPS\n  if (props.default && props.default !== true) {\n    props = props.default\n    keys = Object.keys(props)\n  }\n  const defaults: any = {}\n  for (const key of keys) {\n    const value = transform(props[key], key)\n    if (!is.und(value)) {\n      defaults[key] = value\n    }\n  }\n  return defaults\n}\n\n/**\n * These props are implicitly used as defaults when defined in a\n * declarative update (eg: render-based) or any update with `default: true`.\n *\n * Use `default: {}` or `default: false` to opt-out of these implicit defaults\n * for any given update.\n *\n * Note: These are not the only props with default values. For example, the\n * `pause`, `cancel`, and `immediate` props. But those must be updated with\n * the object syntax (eg: `default: { immediate: true }`).\n */\nexport const DEFAULT_PROPS = [\n  'config',\n  'onProps',\n  'onStart',\n  'onChange',\n  'onPause',\n  'onResume',\n  'onRest',\n] as const\n\nconst RESERVED_PROPS: {\n  [key: string]: 1 | undefined\n} = {\n  config: 1,\n  from: 1,\n  to: 1,\n  ref: 1,\n  loop: 1,\n  reset: 1,\n  pause: 1,\n  cancel: 1,\n  reverse: 1,\n  immediate: 1,\n  default: 1,\n  delay: 1,\n  onProps: 1,\n  onStart: 1,\n  onChange: 1,\n  onPause: 1,\n  onResume: 1,\n  onRest: 1,\n  onResolve: 1,\n\n  // Transition props\n  items: 1,\n  trail: 1,\n  sort: 1,\n  expires: 1,\n  initial: 1,\n  enter: 1,\n  update: 1,\n  leave: 1,\n  children: 1,\n  onDestroyed: 1,\n\n  // Internal props\n  keys: 1,\n  callId: 1,\n  parentId: 1,\n}\n\n/**\n * Extract any properties whose keys are *not* reserved for customizing your\n * animations. All hooks use this function, which means `useTransition` props\n * are reserved for `useSpring` calls, etc.\n */\nfunction getForwardProps<Props extends ReservedProps>(\n  props: Props\n): ForwardProps<Props> | undefined {\n  const forward: any = {}\n\n  let count = 0\n  eachProp(props, (value, prop) => {\n    if (!RESERVED_PROPS[prop]) {\n      forward[prop] = value\n      count++\n    }\n  })\n\n  if (count) {\n    return forward\n  }\n}\n\n/**\n * Clone the given `props` and move all non-reserved props\n * into the `to` prop.\n */\nexport function inferTo<T extends object>(props: T): InferTo<T> {\n  const to = getForwardProps(props)\n  if (to) {\n    const out: any = { to }\n    eachProp(props, (val, key) => key in to || (out[key] = val))\n    return out\n  }\n  return { ...props } as any\n}\n\n// Compute the goal value, converting \"red\" to \"rgba(255, 0, 0, 1)\" in the process\nexport function computeGoal<T>(value: T | FluidValue<T>): T {\n  value = getFluidValue(value)\n  return is.arr(value)\n    ? value.map(computeGoal)\n    : isAnimatedString(value)\n    ? (G.createStringInterpolator({\n        range: [0, 1],\n        output: [value, value] as any,\n      })(1) as any)\n    : value\n}\n\nexport function hasProps(props: object) {\n  for (const _ in props) return true\n  return false\n}\n\nexport function isAsyncTo(to: any) {\n  return is.fun(to) || (is.arr(to) && is.obj(to[0]))\n}\n\n/** Detach `ctrl` from `ctrl.ref` and (optionally) the given `ref` */\nexport function detachRefs(ctrl: Controller, ref?: SpringRef) {\n  ctrl.ref?.delete(ctrl)\n  ref?.delete(ctrl)\n}\n\n/** Replace `ctrl.ref` with the given `ref` (if defined) */\nexport function replaceRef(ctrl: Controller, ref?: SpringRef) {\n  if (ref && ctrl.ref !== ref) {\n    ctrl.ref?.delete(ctrl)\n    ref.add(ctrl)\n    ctrl.ref = ref\n  }\n}\n","import { Lookup, Remap } from '@react-spring/types'\nimport { is } from '@react-spring/shared'\n\nimport { ControllerUpdate, PickAnimated, SpringValues } from '../types'\nimport { Valid } from '../types/common'\nimport { SpringRef } from '../SpringRef'\nimport { useSprings } from './useSprings'\n\n/**\n * The props that `useSpring` recognizes.\n */\nexport type UseSpringProps<Props extends object = any> = unknown &\n  PickAnimated<Props> extends infer State\n  ? State extends Lookup\n    ? Remap<\n        ControllerUpdate<State> & {\n          /**\n           * Used to access the imperative API.\n           *\n           * When defined, the render animation won't auto-start.\n           */\n          ref?: SpringRef<State>\n        }\n      >\n    : never\n  : never\n\n/**\n * The `props` function is only called on the first render, unless\n * `deps` change (when defined). State is inferred from forward props.\n */\nexport function useSpring<Props extends object>(\n  props:\n    | Function\n    | (() => (Props & Valid<Props, UseSpringProps<Props>>) | UseSpringProps),\n  deps?: readonly any[] | undefined\n): PickAnimated<Props> extends infer State\n  ? State extends Lookup\n    ? [SpringValues<State>, SpringRef<State>]\n    : never\n  : never\n\n/**\n * Updated on every render, with state inferred from forward props.\n */\nexport function useSpring<Props extends object>(\n  props: (Props & Valid<Props, UseSpringProps<Props>>) | UseSpringProps\n): SpringValues<PickAnimated<Props>>\n\n/**\n * Updated only when `deps` change, with state inferred from forward props.\n */\nexport function useSpring<Props extends object>(\n  props: (Props & Valid<Props, UseSpringProps<Props>>) | UseSpringProps,\n  deps: readonly any[] | undefined\n): PickAnimated<Props> extends infer State\n  ? State extends Lookup\n    ? [SpringValues<State>, SpringRef<State>]\n    : never\n  : never\n\n/** @internal */\nexport function useSpring(props: any, deps?: readonly any[]) {\n  const isFn = is.fun(props)\n  const [[values], ref] = useSprings(\n    1,\n    isFn ? props : [props],\n    isFn ? deps || [] : deps\n  )\n  return isFn || arguments.length == 2 ? [values, ref] : values\n}\n","import { useContext, useMemo, useRef } from 'react'\nimport { Lookup } from '@react-spring/types'\nimport {\n  is,\n  each,\n  usePrev,\n  useOnce,\n  useForceUpdate,\n  useIsomorphicLayoutEffect,\n} from '@react-spring/shared'\n\nimport {\n  ControllerFlushFn,\n  ControllerUpdate,\n  PickAnimated,\n  SpringValues,\n} from '../types'\nimport { UseSpringProps } from './useSpring'\nimport { declareUpdate } from '../SpringValue'\nimport {\n  Controller,\n  getSprings,\n  flushUpdateQueue,\n  setSprings,\n} from '../Controller'\nimport { hasProps, detachRefs, replaceRef } from '../helpers'\nimport { SpringContext } from '../SpringContext'\nimport { SpringRef } from '../SpringRef'\nimport type { SpringRef as SpringRefType } from '../SpringRef'\n\nexport type UseSpringsProps<State extends Lookup = Lookup> = unknown &\n  ControllerUpdate<State> & {\n    ref?: SpringRefType<State>\n  }\n\n/**\n * When the `deps` argument exists, the `props` function is called whenever\n * the `deps` change on re-render.\n *\n * Without the `deps` argument, the `props` function is only called once.\n */\nexport function useSprings<Props extends UseSpringProps>(\n  length: number,\n  props: (i: number, ctrl: Controller) => Props,\n  deps?: readonly any[]\n): PickAnimated<Props> extends infer State\n  ? State extends Lookup<any>\n    ? [SpringValues<State>[], SpringRefType<State>]\n    : never\n  : never\n\n/**\n * Animations are updated on re-render.\n */\nexport function useSprings<Props extends UseSpringsProps>(\n  length: number,\n  props: Props[] & UseSpringsProps<PickAnimated<Props>>[]\n): SpringValues<PickAnimated<Props>>[]\n\n/**\n * When the `deps` argument exists, you get the `update` and `stop` function.\n */\nexport function useSprings<Props extends UseSpringsProps>(\n  length: number,\n  props: Props[] & UseSpringsProps<PickAnimated<Props>>[],\n  deps: readonly any[] | undefined\n): PickAnimated<Props> extends infer State\n  ? State extends Lookup<any>\n    ? [SpringValues<State>[], SpringRefType<State>]\n    : never\n  : never\n\n/** @internal */\nexport function useSprings(\n  length: number,\n  props: any[] | ((i: number, ctrl: Controller) => any),\n  deps?: readonly any[]\n): any {\n  const propsFn = is.fun(props) && props\n  if (propsFn && !deps) deps = []\n\n  // Create a local ref if a props function or deps array is ever passed.\n  const ref = useMemo(\n    () => (propsFn || arguments.length == 3 ? SpringRef() : void 0),\n    []\n  )\n\n  interface State {\n    // The controllers used for applying updates.\n    ctrls: Controller[]\n    // The queue of changes to make on commit.\n    queue: Array<() => void>\n    // The flush function used by controllers.\n    flush: ControllerFlushFn\n  }\n\n  // Set to 0 to prevent sync flush.\n  const layoutId = useRef(0)\n  const forceUpdate = useForceUpdate()\n\n  // State is updated on commit.\n  const state = useMemo(\n    (): State => ({\n      ctrls: [],\n      queue: [],\n      flush(ctrl, updates) {\n        const springs = getSprings(ctrl, updates)\n\n        // Flushing is postponed until the component's commit phase\n        // if a spring was created since the last commit.\n        const canFlushSync =\n          layoutId.current > 0 &&\n          !state.queue.length &&\n          !Object.keys(springs).some(key => !ctrl.springs[key])\n\n        return canFlushSync\n          ? flushUpdateQueue(ctrl, updates)\n          : new Promise<any>(resolve => {\n              setSprings(ctrl, springs)\n              state.queue.push(() => {\n                resolve(flushUpdateQueue(ctrl, updates))\n              })\n              forceUpdate()\n            })\n      },\n    }),\n    []\n  )\n\n  const ctrls = useRef([...state.ctrls])\n  const updates: any[] = []\n\n  // Cache old controllers to dispose in the commit phase.\n  const prevLength = usePrev(length) || 0\n\n  // Create new controllers when \"length\" increases, and destroy\n  // the affected controllers when \"length\" decreases.\n  useMemo(() => {\n    // Clean up any unused controllers\n    each(ctrls.current.slice(length, prevLength), ctrl => {\n      detachRefs(ctrl, ref)\n      ctrl.stop(true)\n    })\n    ctrls.current.length = length\n\n    declareUpdates(prevLength, length)\n  }, [length])\n\n  // Update existing controllers when \"deps\" are changed.\n  useMemo(() => {\n    declareUpdates(0, Math.min(prevLength, length))\n  }, deps)\n\n  /** Fill the `updates` array with declarative updates for the given index range. */\n  function declareUpdates(startIndex: number, endIndex: number) {\n    for (let i = startIndex; i < endIndex; i++) {\n      const ctrl =\n        ctrls.current[i] ||\n        (ctrls.current[i] = new Controller(null, state.flush))\n\n      const update: UseSpringProps<any> = propsFn\n        ? propsFn(i, ctrl)\n        : (props as any)[i]\n\n      if (update) {\n        updates[i] = declareUpdate(update)\n      }\n    }\n  }\n\n  // New springs are created during render so users can pass them to\n  // their animated components, but new springs aren't cached until the\n  // commit phase (see the `useIsomorphicLayoutEffect` callback below).\n  const springs = ctrls.current.map((ctrl, i) => getSprings(ctrl, updates[i]))\n\n  const context = useContext(SpringContext)\n  const prevContext = usePrev(context)\n  const hasContext = context !== prevContext && hasProps(context)\n\n  useIsomorphicLayoutEffect(() => {\n    layoutId.current++\n\n    // Replace the cached controllers.\n    state.ctrls = ctrls.current\n\n    // Flush the commit queue.\n    const { queue } = state\n    if (queue.length) {\n      state.queue = []\n      each(queue, cb => cb())\n    }\n\n    // Update existing controllers.\n    each(ctrls.current, (ctrl, i) => {\n      // Attach the controller to the local ref.\n      ref?.add(ctrl)\n\n      // Update the default props.\n      if (hasContext) {\n        ctrl.start({ default: context })\n      }\n\n      // Apply updates created during render.\n      const update = updates[i]\n      if (update) {\n        // Update the injected ref if needed.\n        replaceRef(ctrl, update.ref)\n\n        // When an injected ref exists, the update is postponed\n        // until the ref has its `start` method called.\n        if (ctrl.ref) {\n          ctrl.queue.push(update)\n        } else {\n          ctrl.start(update)\n        }\n      }\n    })\n  })\n\n  // Cancel the animations of all controllers on unmount.\n  useOnce(() => () => {\n    each(state.ctrls, ctrl => ctrl.stop(true))\n  })\n\n  // Return a deep copy of the `springs` array so the caller can\n  // safely mutate it during render.\n  const values = springs.map(x => ({ ...x }))\n\n  return ref ? [values, ref] : values\n}\n","import {\n  is,\n  raf,\n  each,\n  isEqual,\n  toArray,\n  eachProp,\n  frameLoop,\n  flushCalls,\n  getFluidValue,\n  isAnimatedString,\n  FluidValue,\n  Globals as G,\n  callFluidObservers,\n  hasFluidValue,\n  addFluidObserver,\n  removeFluidObserver,\n  getFluidObservers,\n} from '@react-spring/shared'\nimport {\n  Animated,\n  AnimatedValue,\n  AnimatedString,\n  getPayload,\n  getAnimated,\n  setAnimated,\n  getAnimatedType,\n} from '@react-spring/animated'\nimport { Lookup } from '@react-spring/types'\n\nimport { Animation } from './Animation'\nimport { mergeConfig } from './AnimationConfig'\nimport { scheduleProps } from './scheduleProps'\nimport { runAsync, RunAsyncState, RunAsyncProps, stopAsync } from './runAsync'\nimport {\n  callProp,\n  computeGoal,\n  matchProp,\n  inferTo,\n  getDefaultProps,\n  getDefaultProp,\n  isAsyncTo,\n  resolveProp,\n} from './helpers'\nimport { FrameValue, isFrameValue } from './FrameValue'\nimport {\n  isAnimating,\n  isPaused,\n  setPausedBit,\n  hasAnimated,\n  setActiveBit,\n} from './SpringPhase'\nimport {\n  AnimationRange,\n  AnimationResolver,\n  EventKey,\n  PickEventFns,\n} from './types/internal'\nimport { AsyncResult, SpringUpdate, VelocityProp, SpringProps } from './types'\nimport {\n  getCombinedResult,\n  getCancelledResult,\n  getFinishedResult,\n  getNoopResult,\n} from './AnimationResult'\n\ndeclare const console: any\n\ninterface DefaultSpringProps<T>\n  extends Pick<SpringProps<T>, 'pause' | 'cancel' | 'immediate' | 'config'>,\n    PickEventFns<SpringProps<T>> {}\n\n/**\n * Only numbers, strings, and arrays of numbers/strings are supported.\n * Non-animatable strings are also supported.\n */\nexport class SpringValue<T = any> extends FrameValue<T> {\n  /** The property name used when `to` or `from` is an object. Useful when debugging too. */\n  key?: string\n\n  /** The animation state */\n  animation = new Animation<T>()\n\n  /** The queue of pending props */\n  queue?: SpringUpdate<T>[]\n\n  /** Some props have customizable default values */\n  defaultProps: DefaultSpringProps<T> = {}\n\n  /** The state for `runAsync` calls */\n  protected _state: RunAsyncState<SpringValue<T>> = {\n    paused: false,\n    delayed: false,\n    pauseQueue: new Set(),\n    resumeQueue: new Set(),\n    timeouts: new Set(),\n  }\n\n  /** The promise resolvers of pending `start` calls */\n  protected _pendingCalls = new Set<AnimationResolver<this>>()\n\n  /** The counter for tracking `scheduleProps` calls */\n  protected _lastCallId = 0\n\n  /** The last `scheduleProps` call that changed the `to` prop */\n  protected _lastToId = 0\n\n  protected _memoizedDuration = 0\n\n  constructor(from: Exclude<T, object>, props?: SpringUpdate<T>)\n  constructor(props?: SpringUpdate<T>)\n  constructor(arg1?: any, arg2?: any) {\n    super()\n    if (!is.und(arg1) || !is.und(arg2)) {\n      const props = is.obj(arg1) ? { ...arg1 } : { ...arg2, from: arg1 }\n      if (is.und(props.default)) {\n        props.default = true\n      }\n      this.start(props)\n    }\n  }\n\n  /** Equals true when not advancing on each frame. */\n  get idle() {\n    return !(isAnimating(this) || this._state.asyncTo) || isPaused(this)\n  }\n\n  get goal() {\n    return getFluidValue(this.animation.to) as T\n  }\n\n  get velocity(): VelocityProp<T> {\n    const node = getAnimated(this)!\n    return (\n      node instanceof AnimatedValue\n        ? node.lastVelocity || 0\n        : node.getPayload().map(node => node.lastVelocity || 0)\n    ) as any\n  }\n\n  /**\n   * When true, this value has been animated at least once.\n   */\n  get hasAnimated() {\n    return hasAnimated(this)\n  }\n\n  /**\n   * When true, this value has an unfinished animation,\n   * which is either active or paused.\n   */\n  get isAnimating() {\n    return isAnimating(this)\n  }\n\n  /**\n   * When true, all current and future animations are paused.\n   */\n  get isPaused() {\n    return isPaused(this)\n  }\n\n  /**\n   *\n   *\n   */\n  get isDelayed() {\n    return this._state.delayed\n  }\n\n  /** Advance the current animation by a number of milliseconds */\n  advance(dt: number) {\n    let idle = true\n    let changed = false\n\n    const anim = this.animation\n    let { toValues } = anim\n    const { config } = anim\n\n    const payload = getPayload(anim.to)\n    if (!payload && hasFluidValue(anim.to)) {\n      toValues = toArray(getFluidValue(anim.to)) as any\n    }\n\n    anim.values.forEach((node, i) => {\n      if (node.done) return\n\n      const to =\n        // Animated strings always go from 0 to 1.\n        node.constructor == AnimatedString\n          ? 1\n          : payload\n          ? payload[i].lastPosition\n          : toValues![i]\n\n      let finished = anim.immediate\n      let position = to\n\n      if (!finished) {\n        position = node.lastPosition\n\n        // Loose springs never move.\n        if (config.tension <= 0) {\n          node.done = true\n          return\n        }\n\n        let elapsed = (node.elapsedTime += dt)\n        const from = anim.fromValues[i]\n\n        const v0 =\n          node.v0 != null\n            ? node.v0\n            : (node.v0 = is.arr(config.velocity)\n                ? config.velocity[i]\n                : config.velocity)\n\n        let velocity: number\n\n        /** The smallest distance from a value before being treated like said value. */\n        /**\n         * TODO: make this value ~0.0001 by default in next breaking change\n         * for more info see – https://github.com/pmndrs/react-spring/issues/1389\n         */\n        const precision =\n          config.precision ||\n          (from == to ? 0.005 : Math.min(1, Math.abs(to - from) * 0.001))\n\n        // Duration easing\n        if (!is.und(config.duration)) {\n          let p = 1\n          if (config.duration > 0) {\n            /**\n             * Here we check if the duration has changed in the config\n             * and if so update the elapsed time to the percentage\n             * of completition so there is no jank in the animation\n             * https://github.com/pmndrs/react-spring/issues/1163\n             */\n            if (this._memoizedDuration !== config.duration) {\n              // update the memoized version to the new duration\n              this._memoizedDuration = config.duration\n\n              // if the value has started animating we need to update it\n              if (node.durationProgress > 0) {\n                // set elapsed time to be the same percentage of progress as the previous duration\n                node.elapsedTime = config.duration * node.durationProgress\n                // add the delta so the below updates work as expected\n                elapsed = node.elapsedTime += dt\n              }\n            }\n\n            // calculate the new progress\n            p = (config.progress || 0) + elapsed / this._memoizedDuration\n            // p is clamped between 0-1\n            p = p > 1 ? 1 : p < 0 ? 0 : p\n            // store our new progress\n            node.durationProgress = p\n          }\n\n          position = from + config.easing(p) * (to - from)\n          velocity = (position - node.lastPosition) / dt\n\n          finished = p == 1\n        }\n\n        // Decay easing\n        else if (config.decay) {\n          const decay = config.decay === true ? 0.998 : config.decay\n          const e = Math.exp(-(1 - decay) * elapsed)\n\n          position = from + (v0 / (1 - decay)) * (1 - e)\n          finished = Math.abs(node.lastPosition - position) <= precision\n\n          // derivative of position\n          velocity = v0 * e\n        }\n\n        // Spring easing\n        else {\n          velocity = node.lastVelocity == null ? v0 : node.lastVelocity\n\n          /** The velocity at which movement is essentially none */\n          const restVelocity = config.restVelocity || precision / 10\n\n          // Bouncing is opt-in (not to be confused with overshooting)\n          const bounceFactor = config.clamp ? 0 : config.bounce!\n          const canBounce = !is.und(bounceFactor)\n\n          /** When `true`, the value is increasing over time */\n          const isGrowing = from == to ? node.v0 > 0 : from < to\n\n          /** When `true`, the velocity is considered moving */\n          let isMoving!: boolean\n\n          /** When `true`, the velocity is being deflected or clamped */\n          let isBouncing = false\n\n          const step = 1 // 1ms\n          const numSteps = Math.ceil(dt / step)\n          for (let n = 0; n < numSteps; ++n) {\n            isMoving = Math.abs(velocity) > restVelocity\n\n            if (!isMoving) {\n              finished = Math.abs(to - position) <= precision\n              if (finished) {\n                break\n              }\n            }\n\n            if (canBounce) {\n              isBouncing = position == to || position > to == isGrowing\n\n              // Invert the velocity with a magnitude, or clamp it.\n              if (isBouncing) {\n                velocity = -velocity * bounceFactor\n                position = to\n              }\n            }\n\n            const springForce = -config.tension * 0.000001 * (position - to)\n            const dampingForce = -config.friction * 0.001 * velocity\n            const acceleration = (springForce + dampingForce) / config.mass // pt/ms^2\n\n            velocity = velocity + acceleration * step // pt/ms\n            position = position + velocity * step\n          }\n        }\n\n        node.lastVelocity = velocity\n\n        if (Number.isNaN(position)) {\n          console.warn(`Got NaN while animating:`, this)\n          finished = true\n        }\n      }\n\n      // Parent springs must finish before their children can.\n      if (payload && !payload[i].done) {\n        finished = false\n      }\n\n      if (finished) {\n        node.done = true\n      } else {\n        idle = false\n      }\n\n      if (node.setValue(position, config.round)) {\n        changed = true\n      }\n    })\n\n    const node = getAnimated(this)!\n    /**\n     * Get the node's current value, this will be different\n     * to anim.to when config.decay is true\n     */\n    const currVal = node.getValue()\n    if (idle) {\n      // get our final fluid val from the anim.to\n      const finalVal = getFluidValue(anim.to)\n      /**\n       * check if they're not equal, or if they're\n       * change and if there's no config.decay set\n       */\n      if ((currVal !== finalVal || changed) && !config.decay) {\n        // set the value to anim.to\n        node.setValue(finalVal)\n        this._onChange(finalVal)\n      } else if (changed && config.decay) {\n        /**\n         * if it's changed but there is a config.decay,\n         * just call _onChange with currrent value\n         */\n        this._onChange(currVal)\n      }\n      // call stop because the spring has stopped.\n      this._stop()\n    } else if (changed) {\n      /**\n       * if the spring has changed, but is not idle,\n       * just call the _onChange handler\n       */\n      this._onChange(currVal)\n    }\n  }\n\n  /** Set the current value, while stopping the current animation */\n  set(value: T | FluidValue<T>) {\n    raf.batchedUpdates(() => {\n      this._stop()\n\n      // These override the current value and goal value that may have\n      // been updated by `onRest` handlers in the `_stop` call above.\n      this._focus(value)\n      this._set(value)\n    })\n    return this\n  }\n\n  /**\n   * Freeze the active animation in time, as well as any updates merged\n   * before `resume` is called.\n   */\n  pause() {\n    this._update({ pause: true })\n  }\n\n  /** Resume the animation if paused. */\n  resume() {\n    this._update({ pause: false })\n  }\n\n  /** Skip to the end of the current animation. */\n  finish() {\n    if (isAnimating(this)) {\n      const { to, config } = this.animation\n      raf.batchedUpdates(() => {\n        // Ensure the \"onStart\" and \"onRest\" props are called.\n        this._onStart()\n\n        // Jump to the goal value, except for decay animations\n        // which have an undefined goal value.\n        if (!config.decay) {\n          this._set(to, false)\n        }\n\n        this._stop()\n      })\n    }\n    return this\n  }\n\n  /** Push props into the pending queue. */\n  update(props: SpringUpdate<T>) {\n    const queue = this.queue || (this.queue = [])\n    queue.push(props)\n    return this\n  }\n\n  /**\n   * Update this value's animation using the queue of pending props,\n   * and unpause the current animation (if one is frozen).\n   *\n   * When arguments are passed, a new animation is created, and the\n   * queued animations are left alone.\n   */\n  start(): AsyncResult<this>\n\n  start(props: SpringUpdate<T>): AsyncResult<this>\n\n  start(to: T, props?: SpringProps<T>): AsyncResult<this>\n\n  start(to?: any, arg2?: any) {\n    let queue: SpringUpdate<T>[]\n    if (!is.und(to)) {\n      queue = [is.obj(to) ? to : { ...arg2, to }]\n    } else {\n      queue = this.queue || []\n      this.queue = []\n    }\n\n    return Promise.all(\n      queue.map(props => {\n        const up = this._update(props)\n        return up\n      })\n    ).then(results => getCombinedResult(this, results))\n  }\n\n  /**\n   * Stop the current animation, and cancel any delayed updates.\n   *\n   * Pass `true` to call `onRest` with `cancelled: true`.\n   */\n  stop(cancel?: boolean) {\n    const { to } = this.animation\n\n    // The current value becomes the goal value.\n    this._focus(this.get())\n\n    stopAsync(this._state, cancel && this._lastCallId)\n    raf.batchedUpdates(() => this._stop(to, cancel))\n\n    return this\n  }\n\n  /** Restart the animation. */\n  reset() {\n    this._update({ reset: true })\n  }\n\n  /** @internal */\n  eventObserved(event: FrameValue.Event) {\n    if (event.type == 'change') {\n      this._start()\n    } else if (event.type == 'priority') {\n      this.priority = event.priority + 1\n    }\n  }\n\n  /**\n   * Parse the `to` and `from` range from the given `props` object.\n   *\n   * This also ensures the initial value is available to animated components\n   * during the render phase.\n   */\n  protected _prepareNode(props: {\n    to?: any\n    from?: any\n    reverse?: boolean\n    default?: any\n  }) {\n    const key = this.key || ''\n\n    let { to, from } = props\n\n    to = is.obj(to) ? to[key] : to\n    if (to == null || isAsyncTo(to)) {\n      to = undefined\n    }\n\n    from = is.obj(from) ? from[key] : from\n    if (from == null) {\n      from = undefined\n    }\n\n    // Create the range now to avoid \"reverse\" logic.\n    const range = { to, from }\n\n    // Before ever animating, this method ensures an `Animated` node\n    // exists and keeps its value in sync with the \"from\" prop.\n    if (!hasAnimated(this)) {\n      if (props.reverse) [to, from] = [from, to]\n\n      from = getFluidValue(from)\n      if (!is.und(from)) {\n        this._set(from)\n      }\n      // Use the \"to\" value if our node is undefined.\n      else if (!getAnimated(this)) {\n        this._set(to)\n      }\n    }\n\n    return range\n  }\n\n  /** Every update is processed by this method before merging. */\n  protected _update(\n    { ...props }: SpringProps<T>,\n    isLoop?: boolean\n  ): AsyncResult<SpringValue<T>> {\n    const { key, defaultProps } = this\n\n    // Update the default props immediately.\n    if (props.default)\n      Object.assign(\n        defaultProps,\n        getDefaultProps(props, (value, prop) =>\n          /^on/.test(prop) ? resolveProp(value, key) : value\n        )\n      )\n\n    mergeActiveFn(this, props, 'onProps')\n    sendEvent(this, 'onProps', props, this)\n\n    // Ensure the initial value can be accessed by animated components.\n    const range = this._prepareNode(props)\n\n    if (Object.isFrozen(this)) {\n      throw Error(\n        'Cannot animate a `SpringValue` object that is frozen. ' +\n          'Did you forget to pass your component to `animated(...)` before animating its props?'\n      )\n    }\n\n    const state = this._state\n\n    return scheduleProps(++this._lastCallId, {\n      key,\n      props,\n      defaultProps,\n      state,\n      actions: {\n        pause: () => {\n          if (!isPaused(this)) {\n            setPausedBit(this, true)\n            flushCalls(state.pauseQueue)\n            sendEvent(\n              this,\n              'onPause',\n              getFinishedResult(this, checkFinished(this, this.animation.to)),\n              this\n            )\n          }\n        },\n        resume: () => {\n          if (isPaused(this)) {\n            setPausedBit(this, false)\n            if (isAnimating(this)) {\n              this._resume()\n            }\n            flushCalls(state.resumeQueue)\n            sendEvent(\n              this,\n              'onResume',\n              getFinishedResult(this, checkFinished(this, this.animation.to)),\n              this\n            )\n          }\n        },\n        start: this._merge.bind(this, range),\n      },\n    }).then(result => {\n      if (props.loop && result.finished && !(isLoop && result.noop)) {\n        const nextProps = createLoopUpdate(props)\n        if (nextProps) {\n          return this._update(nextProps, true)\n        }\n      }\n      return result\n    })\n  }\n\n  /** Merge props into the current animation */\n  protected _merge(\n    range: AnimationRange<T>,\n    props: RunAsyncProps<SpringValue<T>>,\n    resolve: AnimationResolver<SpringValue<T>>\n  ): void {\n    // The \"cancel\" prop cancels all pending delays and it forces the\n    // active animation to stop where it is.\n    if (props.cancel) {\n      this.stop(true)\n      return resolve(getCancelledResult(this))\n    }\n\n    /** The \"to\" prop is defined. */\n    const hasToProp = !is.und(range.to)\n\n    /** The \"from\" prop is defined. */\n    const hasFromProp = !is.und(range.from)\n\n    // Avoid merging other props if implicitly prevented, except\n    // when both the \"to\" and \"from\" props are undefined.\n    if (hasToProp || hasFromProp) {\n      if (props.callId > this._lastToId) {\n        this._lastToId = props.callId\n      } else {\n        return resolve(getCancelledResult(this))\n      }\n    }\n\n    const { key, defaultProps, animation: anim } = this\n    const { to: prevTo, from: prevFrom } = anim\n    let { to = prevTo, from = prevFrom } = range\n\n    // Focus the \"from\" value if changing without a \"to\" value.\n    // For default updates, do this only if no \"to\" value exists.\n    if (hasFromProp && !hasToProp && (!props.default || is.und(to))) {\n      to = from\n    }\n\n    // Flip the current range if \"reverse\" is true.\n    if (props.reverse) [to, from] = [from, to]\n\n    /** The \"from\" value is changing. */\n    const hasFromChanged = !isEqual(from, prevFrom)\n\n    if (hasFromChanged) {\n      anim.from = from\n    }\n\n    // Coerce \"from\" into a static value.\n    from = getFluidValue(from)\n\n    /** The \"to\" value is changing. */\n    const hasToChanged = !isEqual(to, prevTo)\n\n    if (hasToChanged) {\n      this._focus(to)\n    }\n\n    /** The \"to\" prop is async. */\n    const hasAsyncTo = isAsyncTo(props.to)\n\n    const { config } = anim\n    const { decay, velocity } = config\n\n    // Reset to default velocity when goal values are defined.\n    if (hasToProp || hasFromProp) {\n      config.velocity = 0\n    }\n\n    // The \"runAsync\" function treats the \"config\" prop as a default,\n    // so we must avoid merging it when the \"to\" prop is async.\n    if (props.config && !hasAsyncTo) {\n      mergeConfig(\n        config,\n        callProp(props.config, key!),\n        // Avoid calling the same \"config\" prop twice.\n        props.config !== defaultProps.config\n          ? callProp(defaultProps.config, key!)\n          : void 0\n      )\n    }\n\n    // This instance might not have its Animated node yet. For example,\n    // the constructor can be given props without a \"to\" or \"from\" value.\n    let node = getAnimated(this)\n    if (!node || is.und(to)) {\n      return resolve(getFinishedResult(this, true))\n    }\n\n    /** When true, start at the \"from\" value. */\n    const reset =\n      // When `reset` is undefined, the `from` prop implies `reset: true`,\n      // except for declarative updates. When `reset` is defined, there\n      // must exist a value to animate from.\n      is.und(props.reset)\n        ? hasFromProp && !props.default\n        : !is.und(from) && matchProp(props.reset, key)\n\n    // The current value, where the animation starts from.\n    const value = reset ? (from as T) : this.get()\n\n    // The animation ends at this value, unless \"to\" is fluid.\n    const goal = computeGoal<any>(to)\n\n    // Only specific types can be animated to/from.\n    const isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal)\n\n    // When true, the value changes instantly on the next frame.\n    const immediate =\n      !hasAsyncTo &&\n      (!isAnimatable ||\n        matchProp(defaultProps.immediate || props.immediate, key))\n\n    if (hasToChanged) {\n      const nodeType = getAnimatedType(to)\n      if (nodeType !== node.constructor) {\n        if (immediate) {\n          node = this._set(goal)!\n        } else\n          throw Error(\n            `Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the \"to\" prop suggests`\n          )\n      }\n    }\n\n    // The type of Animated node for the goal value.\n    const goalType = node.constructor\n\n    // When the goal value is fluid, we don't know if its value\n    // will change before the next animation frame, so it always\n    // starts the animation to be safe.\n    let started = hasFluidValue(to)\n    let finished = false\n\n    if (!started) {\n      // When true, the current value has probably changed.\n      const hasValueChanged = reset || (!hasAnimated(this) && hasFromChanged)\n\n      // When the \"to\" value or current value are changed,\n      // start animating if not already finished.\n      if (hasToChanged || hasValueChanged) {\n        finished = isEqual(computeGoal(value), goal)\n        started = !finished\n      }\n\n      // Changing \"decay\" or \"velocity\" starts the animation.\n      if (\n        (!isEqual(anim.immediate, immediate) && !immediate) ||\n        !isEqual(config.decay, decay) ||\n        !isEqual(config.velocity, velocity)\n      ) {\n        started = true\n      }\n    }\n\n    // Was the goal value set to the current value while animating?\n    if (finished && isAnimating(this)) {\n      // If the first frame has passed, allow the animation to\n      // overshoot instead of stopping abruptly.\n      if (anim.changed && !reset) {\n        started = true\n      }\n      // Stop the animation before its first frame.\n      else if (!started) {\n        this._stop(prevTo)\n      }\n    }\n\n    if (!hasAsyncTo) {\n      // Make sure our \"toValues\" are updated even if our previous\n      // \"to\" prop is a fluid value whose current value is also ours.\n      if (started || hasFluidValue(prevTo)) {\n        anim.values = node.getPayload()\n        anim.toValues = hasFluidValue(to)\n          ? null\n          : goalType == AnimatedString\n          ? [1]\n          : toArray(goal)\n      }\n\n      if (anim.immediate != immediate) {\n        anim.immediate = immediate\n\n        // Ensure the immediate goal is used as from value.\n        if (!immediate && !reset) {\n          this._set(prevTo)\n        }\n      }\n\n      if (started) {\n        const { onRest } = anim\n\n        // Set the active handlers when an animation starts.\n        each(ACTIVE_EVENTS, type => mergeActiveFn(this, props, type))\n\n        const result = getFinishedResult(this, checkFinished(this, prevTo))\n        flushCalls(this._pendingCalls, result)\n        this._pendingCalls.add(resolve)\n\n        if (anim.changed)\n          raf.batchedUpdates(() => {\n            // Ensure `onStart` can be called after a reset.\n            anim.changed = !reset\n\n            // Call the active `onRest` handler from the interrupted animation.\n            onRest?.(result, this)\n\n            // Notify the default `onRest` of the reset, but wait for the\n            // first frame to pass before sending an `onStart` event.\n            if (reset) {\n              callProp(defaultProps.onRest, result)\n            }\n            // Call the active `onStart` handler here since the first frame\n            // has already passed, which means this is a goal update and not\n            // an entirely new animation.\n            else {\n              anim.onStart?.(result, this)\n            }\n          })\n      }\n    }\n\n    if (reset) {\n      this._set(value)\n    }\n\n    if (hasAsyncTo) {\n      resolve(runAsync(props.to, props, this._state, this))\n    }\n\n    // Start an animation\n    else if (started) {\n      this._start()\n    }\n\n    // Postpone promise resolution until the animation is finished,\n    // so that no-op updates still resolve at the expected time.\n    else if (isAnimating(this) && !hasToChanged) {\n      this._pendingCalls.add(resolve)\n    }\n\n    // Resolve our promise immediately.\n    else {\n      resolve(getNoopResult(value))\n    }\n  }\n\n  /** Update the `animation.to` value, which might be a `FluidValue` */\n  protected _focus(value: T | FluidValue<T>) {\n    const anim = this.animation\n    if (value !== anim.to) {\n      if (getFluidObservers(this)) {\n        this._detach()\n      }\n      anim.to = value\n      if (getFluidObservers(this)) {\n        this._attach()\n      }\n    }\n  }\n\n  protected _attach() {\n    let priority = 0\n\n    const { to } = this.animation\n    if (hasFluidValue(to)) {\n      addFluidObserver(to, this)\n      if (isFrameValue(to)) {\n        priority = to.priority + 1\n      }\n    }\n\n    this.priority = priority\n  }\n\n  protected _detach() {\n    const { to } = this.animation\n    if (hasFluidValue(to)) {\n      removeFluidObserver(to, this)\n    }\n  }\n\n  /**\n   * Update the current value from outside the frameloop,\n   * and return the `Animated` node.\n   */\n  protected _set(arg: T | FluidValue<T>, idle = true): Animated | undefined {\n    const value = getFluidValue(arg)\n    if (!is.und(value)) {\n      const oldNode = getAnimated(this)\n      if (!oldNode || !isEqual(value, oldNode.getValue())) {\n        // Create a new node or update the existing node.\n        const nodeType = getAnimatedType(value)\n        if (!oldNode || oldNode.constructor != nodeType) {\n          setAnimated(this, nodeType.create(value))\n        } else {\n          oldNode.setValue(value)\n        }\n        // Never emit a \"change\" event for the initial value.\n        if (oldNode) {\n          raf.batchedUpdates(() => {\n            this._onChange(value, idle)\n          })\n        }\n      }\n    }\n    return getAnimated(this)\n  }\n\n  protected _onStart() {\n    const anim = this.animation\n    if (!anim.changed) {\n      anim.changed = true\n      sendEvent(\n        this,\n        'onStart',\n        getFinishedResult(this, checkFinished(this, anim.to)),\n        this\n      )\n    }\n  }\n\n  protected _onChange(value: T, idle?: boolean) {\n    if (!idle) {\n      this._onStart()\n      callProp(this.animation.onChange, value, this)\n    }\n    callProp(this.defaultProps.onChange, value, this)\n    super._onChange(value, idle)\n  }\n\n  // This method resets the animation state (even if already animating) to\n  // ensure the latest from/to range is used, and it also ensures this spring\n  // is added to the frameloop.\n  protected _start() {\n    const anim = this.animation\n\n    // Reset the state of each Animated node.\n    getAnimated(this)!.reset(getFluidValue(anim.to))\n\n    // Use the current values as the from values.\n    if (!anim.immediate) {\n      anim.fromValues = anim.values.map(node => node.lastPosition)\n    }\n\n    if (!isAnimating(this)) {\n      setActiveBit(this, true)\n      if (!isPaused(this)) {\n        this._resume()\n      }\n    }\n  }\n\n  protected _resume() {\n    // The \"skipAnimation\" global avoids the frameloop.\n    if (G.skipAnimation) {\n      this.finish()\n    } else {\n      frameLoop.start(this)\n    }\n  }\n\n  /**\n   * Exit the frameloop and notify `onRest` listeners.\n   *\n   * Always wrap `_stop` calls with `batchedUpdates`.\n   */\n  protected _stop(goal?: any, cancel?: boolean) {\n    if (isAnimating(this)) {\n      setActiveBit(this, false)\n\n      const anim = this.animation\n      each(anim.values, node => {\n        node.done = true\n      })\n\n      // These active handlers must be reset to undefined or else\n      // they could be called while idle. But keep them defined\n      // when the goal value is dynamic.\n      if (anim.toValues) {\n        anim.onChange = anim.onPause = anim.onResume = undefined\n      }\n\n      callFluidObservers(this, {\n        type: 'idle',\n        parent: this,\n      })\n\n      const result = cancel\n        ? getCancelledResult(this.get())\n        : getFinishedResult(this.get(), checkFinished(this, goal ?? anim.to))\n\n      flushCalls(this._pendingCalls, result)\n      if (anim.changed) {\n        anim.changed = false\n        sendEvent(this, 'onRest', result, this)\n      }\n    }\n  }\n}\n\n/** Returns true when the current value and goal value are equal. */\nfunction checkFinished<T>(target: SpringValue<T>, to: T | FluidValue<T>) {\n  const goal = computeGoal(to)\n  const value = computeGoal(target.get())\n  return isEqual(value, goal)\n}\n\nexport function createLoopUpdate<T>(\n  props: T & { loop?: any; to?: any; from?: any; reverse?: any },\n  loop = props.loop,\n  to = props.to\n): T | undefined {\n  const loopRet = callProp(loop)\n  if (loopRet) {\n    const overrides = loopRet !== true && inferTo(loopRet)\n    const reverse = (overrides || props).reverse\n    const reset = !overrides || overrides.reset\n    return createUpdate({\n      ...props,\n      loop,\n\n      // Avoid updating default props when looping.\n      default: false,\n\n      // Never loop the `pause` prop.\n      pause: undefined,\n\n      // For the \"reverse\" prop to loop as expected, the \"to\" prop\n      // must be undefined. The \"reverse\" prop is ignored when the\n      // \"to\" prop is an array or function.\n      to: !reverse || isAsyncTo(to) ? to : undefined,\n\n      // Ignore the \"from\" prop except on reset.\n      from: reset ? props.from : undefined,\n      reset,\n\n      // The \"loop\" prop can return a \"useSpring\" props object to\n      // override any of the original props.\n      ...overrides,\n    })\n  }\n}\n\n/**\n * Return a new object based on the given `props`.\n *\n * - All non-reserved props are moved into the `to` prop object.\n * - The `keys` prop is set to an array of affected keys,\n *   or `null` if all keys are affected.\n */\nexport function createUpdate(props: any) {\n  const { to, from } = (props = inferTo(props))\n\n  // Collect the keys affected by this update.\n  const keys = new Set<string>()\n\n  if (is.obj(to)) findDefined(to, keys)\n  if (is.obj(from)) findDefined(from, keys)\n\n  // The \"keys\" prop helps in applying updates to affected keys only.\n  props.keys = keys.size ? Array.from(keys) : null\n\n  return props\n}\n\n/**\n * A modified version of `createUpdate` meant for declarative APIs.\n */\nexport function declareUpdate(props: any) {\n  const update = createUpdate(props)\n  if (is.und(update.default)) {\n    update.default = getDefaultProps(update)\n  }\n  return update\n}\n\n/** Find keys with defined values */\nfunction findDefined(values: Lookup, keys: Set<string>) {\n  eachProp(values, (value, key) => value != null && keys.add(key as any))\n}\n\n/** Event props with \"active handler\" support */\nconst ACTIVE_EVENTS = [\n  'onStart',\n  'onRest',\n  'onChange',\n  'onPause',\n  'onResume',\n] as const\n\nfunction mergeActiveFn<T, P extends EventKey>(\n  target: SpringValue<T>,\n  props: SpringProps<T>,\n  type: P\n) {\n  target.animation[type] =\n    props[type] !== getDefaultProp(props, type)\n      ? resolveProp<any>(props[type], target.key)\n      : undefined\n}\n\ntype EventArgs<T, P extends EventKey> = Parameters<\n  Extract<SpringProps<T>[P], Function>\n>\n\n/** Call the active handler first, then the default handler. */\nfunction sendEvent<T, P extends EventKey>(\n  target: SpringValue<T>,\n  type: P,\n  ...args: EventArgs<T, P>\n) {\n  target.animation[type]?.(...(args as [any, any]))\n  target.defaultProps[type]?.(...(args as [any, any]))\n}\n","import { is, easings } from '@react-spring/shared'\nimport { EasingFunction } from '@react-spring/types'\nimport { config as configs } from './constants'\n\nconst defaults: any = {\n  ...configs.default,\n  mass: 1,\n  damping: 1,\n  easing: easings.linear,\n  clamp: false,\n}\n\nexport class AnimationConfig {\n  /**\n   * With higher tension, the spring will resist bouncing and try harder to stop at its end value.\n   *\n   * When tension is zero, no animation occurs.\n   *\n   * @default 170\n   */\n  tension!: number\n\n  /**\n   * The damping ratio coefficient, or just the damping ratio when `speed` is defined.\n   *\n   * When `speed` is defined, this value should be between 0 and 1.\n   *\n   * Higher friction means the spring will slow down faster.\n   *\n   * @default 26\n   */\n  friction!: number\n\n  /**\n   * The natural frequency (in seconds), which dictates the number of bounces\n   * per second when no damping exists.\n   *\n   * When defined, `tension` is derived from this, and `friction` is derived\n   * from `tension` and `damping`.\n   */\n  frequency?: number\n\n  /**\n   * The damping ratio, which dictates how the spring slows down.\n   *\n   * Set to `0` to never slow down. Set to `1` to slow down without bouncing.\n   * Between `0` and `1` is for you to explore.\n   *\n   * Only works when `frequency` is defined.\n   *\n   * @default 1\n   */\n  damping!: number\n\n  /**\n   * Higher mass means more friction is required to slow down.\n   *\n   * Defaults to 1, which works fine most of the time.\n   *\n   * @default 1\n   */\n  mass!: number\n\n  /**\n   * The initial velocity of one or more values.\n   *\n   * @default 0\n   */\n  velocity: number | number[] = 0\n\n  /**\n   * The smallest velocity before the animation is considered \"not moving\".\n   *\n   * When undefined, `precision` is used instead.\n   */\n  restVelocity?: number\n\n  /**\n   * The smallest distance from a value before that distance is essentially zero.\n   *\n   * This helps in deciding when a spring is \"at rest\". The spring must be within\n   * this distance from its final value, and its velocity must be lower than this\n   * value too (unless `restVelocity` is defined).\n   *\n   * @default 0.01\n   */\n  precision?: number\n\n  /**\n   * For `duration` animations only. Note: The `duration` is not affected\n   * by this property.\n   *\n   * Defaults to `0`, which means \"start from the beginning\".\n   *\n   * Setting to `1+` makes an immediate animation.\n   *\n   * Setting to `0.5` means \"start from the middle of the easing function\".\n   *\n   * Any number `>= 0` and `<= 1` makes sense here.\n   */\n  progress?: number\n\n  /**\n   * Animation length in number of milliseconds.\n   */\n  duration?: number\n\n  /**\n   * The animation curve. Only used when `duration` is defined.\n   *\n   * Defaults to quadratic ease-in-out.\n   */\n  easing!: EasingFunction\n\n  /**\n   * Avoid overshooting by ending abruptly at the goal value.\n   *\n   * @default false\n   */\n  clamp!: boolean\n\n  /**\n   * When above zero, the spring will bounce instead of overshooting when\n   * exceeding its goal value. Its velocity is multiplied by `-1 + bounce`\n   * whenever its current value equals or exceeds its goal. For example,\n   * setting `bounce` to `0.5` chops the velocity in half on each bounce,\n   * in addition to any friction.\n   */\n  bounce?: number\n\n  /**\n   * \"Decay animations\" decelerate without an explicit goal value.\n   * Useful for scrolling animations.\n   *\n   * Use `true` for the default exponential decay factor (`0.998`).\n   *\n   * When a `number` between `0` and `1` is given, a lower number makes the\n   * animation slow down faster. And setting to `1` would make an unending\n   * animation.\n   *\n   * @default false\n   */\n  decay?: boolean | number\n\n  /**\n   * While animating, round to the nearest multiple of this number.\n   * The `from` and `to` values are never rounded, as well as any value\n   * passed to the `set` method of an animated value.\n   */\n  round?: number\n\n  constructor() {\n    Object.assign(this, defaults)\n  }\n}\n\nexport function mergeConfig(\n  config: AnimationConfig,\n  newConfig: Partial<AnimationConfig>,\n  defaultConfig?: Partial<AnimationConfig>\n): typeof config\n\nexport function mergeConfig(\n  config: any,\n  newConfig: object,\n  defaultConfig?: object\n) {\n  if (defaultConfig) {\n    defaultConfig = { ...defaultConfig }\n    sanitizeConfig(defaultConfig, newConfig)\n    newConfig = { ...defaultConfig, ...newConfig }\n  }\n\n  sanitizeConfig(config, newConfig)\n  Object.assign(config, newConfig)\n\n  for (const key in defaults) {\n    if (config[key] == null) {\n      config[key] = defaults[key]\n    }\n  }\n\n  let { frequency, damping } = config\n  const { mass } = config\n  if (!is.und(frequency)) {\n    if (frequency < 0.01) frequency = 0.01\n    if (damping < 0) damping = 0\n    config.tension = Math.pow((2 * Math.PI) / frequency, 2) * mass\n    config.friction = (4 * Math.PI * damping * mass) / frequency\n  }\n\n  return config\n}\n\n// Prevent a config from accidentally overriding new props.\n// This depends on which \"config\" props take precedence when defined.\nfunction sanitizeConfig(\n  config: Partial<AnimationConfig>,\n  props: Partial<AnimationConfig>\n) {\n  if (!is.und(props.decay)) {\n    config.duration = undefined\n  } else {\n    const isTensionConfig = !is.und(props.tension) || !is.und(props.friction)\n    if (\n      isTensionConfig ||\n      !is.und(props.frequency) ||\n      !is.und(props.damping) ||\n      !is.und(props.mass)\n    ) {\n      config.duration = undefined\n      config.decay = undefined\n    }\n    if (isTensionConfig) {\n      config.frequency = undefined\n    }\n  }\n}\n","// The `mass` prop defaults to 1\nexport const config = {\n  default: { tension: 170, friction: 26 },\n  gentle: { tension: 120, friction: 14 },\n  wobbly: { tension: 180, friction: 12 },\n  stiff: { tension: 210, friction: 20 },\n  slow: { tension: 280, friction: 60 },\n  molasses: { tension: 280, friction: 120 },\n} as const\n","import { AnimatedValue } from '@react-spring/animated'\nimport { FluidValue } from '@react-spring/shared'\nimport { AnimationConfig } from './AnimationConfig'\nimport { PickEventFns } from './types/internal'\nimport { SpringProps } from './types'\n\nconst emptyArray: readonly any[] = []\n\n/** An animation being executed by the frameloop */\nexport class Animation<T = any> {\n  changed = false\n  values: readonly AnimatedValue[] = emptyArray\n  toValues: readonly number[] | null = null\n  fromValues: readonly number[] = emptyArray\n\n  to!: T | FluidValue<T>\n  from!: T | FluidValue<T>\n  config = new AnimationConfig()\n  immediate = false\n}\n\nexport interface Animation<T> extends PickEventFns<SpringProps<T>> {}\n","import { Timeout, is, raf, Globals as G } from '@react-spring/shared'\nimport { matchProp, callProp } from './helpers'\nimport { AsyncResult, MatchProp } from './types'\nimport { RunAsyncState, RunAsyncProps } from './runAsync'\nimport {\n  AnimationResolver,\n  AnimationTarget,\n  InferProps,\n  InferState,\n} from './types/internal'\n\n// The `scheduleProps` function only handles these defaults.\ntype DefaultProps<T> = { cancel?: MatchProp<T>; pause?: MatchProp<T> }\n\ninterface ScheduledProps<T extends AnimationTarget> {\n  key?: string\n  props: InferProps<T>\n  defaultProps?: DefaultProps<InferState<T>>\n  state: RunAsyncState<T>\n  actions: {\n    pause: () => void\n    resume: () => void\n    start: (props: RunAsyncProps<T>, resolve: AnimationResolver<T>) => void\n  }\n}\n\n/**\n * This function sets a timeout if both the `delay` prop exists and\n * the `cancel` prop is not `true`.\n *\n * The `actions.start` function must handle the `cancel` prop itself,\n * but the `pause` prop is taken care of.\n */\nexport function scheduleProps<T extends AnimationTarget>(\n  callId: number,\n  { key, props, defaultProps, state, actions }: ScheduledProps<T>\n): AsyncResult<T> {\n  return new Promise((resolve, reject) => {\n    let delay: number\n    let timeout: Timeout\n\n    let cancel = matchProp(props.cancel ?? defaultProps?.cancel, key)\n    if (cancel) {\n      onStart()\n    } else {\n      // The `pause` prop updates the paused flag.\n      if (!is.und(props.pause)) {\n        state.paused = matchProp(props.pause, key)\n      }\n      // The default `pause` takes precedence when true,\n      // which allows `SpringContext` to work as expected.\n      let pause = defaultProps?.pause\n      if (pause !== true) {\n        pause = state.paused || matchProp(pause, key)\n      }\n\n      delay = callProp(props.delay || 0, key)\n      if (pause) {\n        state.resumeQueue.add(onResume)\n        actions.pause()\n      } else {\n        actions.resume()\n        onResume()\n      }\n    }\n\n    function onPause() {\n      state.resumeQueue.add(onResume)\n      state.timeouts.delete(timeout)\n      timeout.cancel()\n      // Cache the remaining delay.\n      delay = timeout.time - raf.now()\n    }\n\n    function onResume() {\n      if (delay > 0 && !G.skipAnimation) {\n        state.delayed = true\n        timeout = raf.setTimeout(onStart, delay)\n        state.pauseQueue.add(onPause)\n        state.timeouts.add(timeout)\n      } else {\n        onStart()\n      }\n    }\n\n    function onStart() {\n      if (state.delayed) {\n        state.delayed = false\n      }\n\n      state.pauseQueue.delete(onPause)\n      state.timeouts.delete(timeout)\n\n      // Maybe cancelled during its delay.\n      if (callId <= (state.cancelId || 0)) {\n        cancel = true\n      }\n\n      try {\n        actions.start({ ...props, callId, cancel }, resolve)\n      } catch (err) {\n        reject(err)\n      }\n    }\n  })\n}\n","import {\n  is,\n  raf,\n  flush,\n  eachProp,\n  Timeout,\n  Globals as G,\n} from '@react-spring/shared'\nimport { Falsy } from '@react-spring/types'\n\nimport { getDefaultProps } from './helpers'\nimport { AnimationTarget, InferState, InferProps } from './types/internal'\nimport { AnimationResult, AsyncResult, SpringChain, SpringToFn } from './types'\nimport { getCancelledResult, getFinishedResult } from './AnimationResult'\n\ntype AsyncTo<T> = SpringChain<T> | SpringToFn<T>\n\n/** @internal */\nexport type RunAsyncProps<T extends AnimationTarget = any> = InferProps<T> & {\n  callId: number\n  parentId?: number\n  cancel: boolean\n  to?: any\n}\n\n/** @internal */\nexport interface RunAsyncState<T extends AnimationTarget = any> {\n  paused: boolean\n  pauseQueue: Set<() => void>\n  resumeQueue: Set<() => void>\n  timeouts: Set<Timeout>\n  delayed?: boolean\n  asyncId?: number\n  asyncTo?: AsyncTo<InferState<T>>\n  promise?: AsyncResult<T>\n  cancelId?: number\n}\n\n/**\n * Start an async chain or an async script.\n *\n * Always call `runAsync` in the action callback of a `scheduleProps` call.\n *\n * The `T` parameter can be a set of animated values (as an object type)\n * or a primitive type for a single animated value.\n */\nexport function runAsync<T extends AnimationTarget>(\n  to: AsyncTo<InferState<T>>,\n  props: RunAsyncProps<T>,\n  state: RunAsyncState<T>,\n  target: T\n): AsyncResult<T> {\n  const { callId, parentId, onRest } = props\n  const { asyncTo: prevTo, promise: prevPromise } = state\n\n  if (!parentId && to === prevTo && !props.reset) {\n    return prevPromise!\n  }\n\n  return (state.promise = (async () => {\n    state.asyncId = callId\n    state.asyncTo = to\n\n    // The default props of any `animate` calls.\n    const defaultProps = getDefaultProps<InferProps<T>>(props, (value, key) =>\n      // The `onRest` prop is only called when the `runAsync` promise is resolved.\n      key === 'onRest' ? undefined : value\n    )\n\n    let preventBail!: () => void\n    let bail: (error: any) => void\n\n    // This promise is rejected when the animation is interrupted.\n    const bailPromise = new Promise<void>(\n      (resolve, reject) => ((preventBail = resolve), (bail = reject))\n    )\n\n    const bailIfEnded = (bailSignal: BailSignal) => {\n      const bailResult =\n        // The `cancel` prop or `stop` method was used.\n        (callId <= (state.cancelId || 0) && getCancelledResult(target)) ||\n        // The async `to` prop was replaced.\n        (callId !== state.asyncId && getFinishedResult(target, false))\n\n      if (bailResult) {\n        bailSignal.result = bailResult\n\n        // Reject the `bailPromise` to ensure the `runAsync` promise\n        // is not relying on the caller to rethrow the error for us.\n        bail(bailSignal)\n        throw bailSignal\n      }\n    }\n\n    const animate: any = (arg1: any, arg2?: any) => {\n      // Create the bail signal outside the returned promise,\n      // so the generated stack trace is relevant.\n      const bailSignal = new BailSignal()\n      const skipAnimationSignal = new SkipAnimationSignal()\n\n      return (async () => {\n        if (G.skipAnimation) {\n          /**\n           * We need to stop animations if `skipAnimation`\n           * is set in the Globals\n           *\n           */\n          stopAsync(state)\n\n          // create the rejection error that's handled gracefully\n          skipAnimationSignal.result = getFinishedResult(target, false)\n          bail(skipAnimationSignal)\n          throw skipAnimationSignal\n        }\n\n        bailIfEnded(bailSignal)\n\n        const props: any = is.obj(arg1) ? { ...arg1 } : { ...arg2, to: arg1 }\n        props.parentId = callId\n\n        eachProp(defaultProps, (value, key) => {\n          if (is.und(props[key])) {\n            props[key] = value\n          }\n        })\n\n        const result = await target.start(props)\n        bailIfEnded(bailSignal)\n\n        if (state.paused) {\n          await new Promise<void>(resume => {\n            state.resumeQueue.add(resume)\n          })\n        }\n\n        return result\n      })()\n    }\n\n    let result!: AnimationResult<T>\n\n    if (G.skipAnimation) {\n      /**\n       * We need to stop animations if `skipAnimation`\n       * is set in the Globals\n       */\n      stopAsync(state)\n      return getFinishedResult(target, false)\n    }\n\n    try {\n      let animating!: Promise<void>\n\n      // Async sequence\n      if (is.arr(to)) {\n        animating = (async (queue: any[]) => {\n          for (const props of queue) {\n            await animate(props)\n          }\n        })(to)\n      }\n\n      // Async script\n      else {\n        animating = Promise.resolve(to(animate, target.stop.bind(target)))\n      }\n\n      await Promise.all([animating.then(preventBail), bailPromise])\n      result = getFinishedResult(target.get(), true, false)\n\n      // Bail handling\n    } catch (err) {\n      if (err instanceof BailSignal) {\n        result = err.result\n      } else if (err instanceof SkipAnimationSignal) {\n        result = err.result\n      } else {\n        throw err\n      }\n\n      // Reset the async state.\n    } finally {\n      if (callId == state.asyncId) {\n        state.asyncId = parentId\n        state.asyncTo = parentId ? prevTo : undefined\n        state.promise = parentId ? prevPromise : undefined\n      }\n    }\n\n    if (is.fun(onRest)) {\n      raf.batchedUpdates(() => {\n        onRest(result, target, target.item)\n      })\n    }\n\n    return result\n  })())\n}\n\n/** Stop the current `runAsync` call with `finished: false` (or with `cancelled: true` when `cancelId` is defined) */\nexport function stopAsync(state: RunAsyncState, cancelId?: number | Falsy) {\n  flush(state.timeouts, t => t.cancel())\n  state.pauseQueue.clear()\n  state.resumeQueue.clear()\n  state.asyncId = state.asyncTo = state.promise = undefined\n  if (cancelId) state.cancelId = cancelId\n}\n\n/** This error is thrown to signal an interrupted async animation. */\nexport class BailSignal extends Error {\n  result!: AnimationResult\n  constructor() {\n    super(\n      'An async animation has been interrupted. You see this error because you ' +\n        'forgot to use `await` or `.catch(...)` on its returned promise.'\n    )\n  }\n}\n\nexport class SkipAnimationSignal extends Error {\n  result!: AnimationResult\n\n  constructor() {\n    super('SkipAnimationSignal')\n  }\n}\n","import { AnimationResult } from './types'\nimport { Readable } from './types/internal'\n\n/** @internal */\nexport const getCombinedResult = <T extends Readable>(\n  target: T,\n  results: AnimationResult<T>[]\n): AnimationResult<T> =>\n  results.length == 1\n    ? results[0]\n    : results.some(result => result.cancelled)\n    ? getCancelledResult(target.get())\n    : results.every(result => result.noop)\n    ? getNoopResult(target.get())\n    : getFinishedResult(\n        target.get(),\n        results.every(result => result.finished)\n      )\n\n/** No-op results are for updates that never start an animation. */\nexport const getNoopResult = (value: any) => ({\n  value,\n  noop: true,\n  finished: true,\n  cancelled: false,\n})\n\nexport const getFinishedResult = (\n  value: any,\n  finished: boolean,\n  cancelled = false\n) => ({\n  value,\n  finished,\n  cancelled,\n})\n\nexport const getCancelledResult = (value: any) => ({\n  value,\n  cancelled: true,\n  finished: false,\n})\n","import {\n  deprecateInterpolate,\n  frameLoop,\n  FluidValue,\n  Globals as G,\n  callFluidObservers,\n} from '@react-spring/shared'\nimport { InterpolatorArgs } from '@react-spring/types'\nimport { getAnimated } from '@react-spring/animated'\n\nimport { Interpolation } from './Interpolation'\n\nexport const isFrameValue = (value: any): value is FrameValue =>\n  value instanceof FrameValue\n\nlet nextId = 1\n\n/**\n * A kind of `FluidValue` that manages an `AnimatedValue` node.\n *\n * Its underlying value can be accessed and even observed.\n */\nexport abstract class FrameValue<T = any> extends FluidValue<\n  T,\n  FrameValue.Event<T>\n> {\n  readonly id = nextId++\n\n  abstract key?: string\n  abstract get idle(): boolean\n\n  protected _priority = 0\n\n  get priority() {\n    return this._priority\n  }\n  set priority(priority: number) {\n    if (this._priority != priority) {\n      this._priority = priority\n      this._onPriorityChange(priority)\n    }\n  }\n\n  /** Get the current value */\n  get(): T {\n    const node = getAnimated(this)\n    return node && node.getValue()\n  }\n\n  /** Create a spring that maps our value to another value */\n  to<Out>(...args: InterpolatorArgs<T, Out>) {\n    return G.to(this, args) as Interpolation<T, Out>\n  }\n\n  /** @deprecated Use the `to` method instead. */\n  interpolate<Out>(...args: InterpolatorArgs<T, Out>) {\n    deprecateInterpolate()\n    return G.to(this, args) as Interpolation<T, Out>\n  }\n\n  toJSON() {\n    return this.get()\n  }\n\n  protected observerAdded(count: number) {\n    if (count == 1) this._attach()\n  }\n\n  protected observerRemoved(count: number) {\n    if (count == 0) this._detach()\n  }\n\n  /** @internal */\n  abstract advance(dt: number): void\n\n  /** @internal */\n  abstract eventObserved(_event: FrameValue.Event): void\n\n  /** Called when the first child is added. */\n  protected _attach() {}\n\n  /** Called when the last child is removed. */\n  protected _detach() {}\n\n  /** Tell our children about our new value */\n  protected _onChange(value: T, idle = false) {\n    callFluidObservers(this, {\n      type: 'change',\n      parent: this,\n      value,\n      idle,\n    })\n  }\n\n  /** Tell our children about our new priority */\n  protected _onPriorityChange(priority: number) {\n    if (!this.idle) {\n      frameLoop.sort(this)\n    }\n    callFluidObservers(this, {\n      type: 'priority',\n      parent: this,\n      priority,\n    })\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport declare namespace FrameValue {\n  /** A parent changed its value */\n  interface ChangeEvent<T = any> {\n    parent: FrameValue<T>\n    type: 'change'\n    value: T\n    idle: boolean\n  }\n\n  /** A parent changed its priority */\n  interface PriorityEvent<T = any> {\n    parent: FrameValue<T>\n    type: 'priority'\n    priority: number\n  }\n\n  /** A parent is done animating */\n  interface IdleEvent<T = any> {\n    parent: FrameValue<T>\n    type: 'idle'\n  }\n\n  /** Events sent to children of `FrameValue` objects */\n  export type Event<T = any> = ChangeEvent<T> | PriorityEvent<T> | IdleEvent<T>\n}\n","/** The property symbol of the current animation phase. */\nconst $P = Symbol.for('SpringPhase')\n\nconst HAS_ANIMATED = 1\nconst IS_ANIMATING = 2\nconst IS_PAUSED = 4\n\n/** Returns true if the `target` has ever animated. */\nexport const hasAnimated = (target: any) => (target[$P] & HAS_ANIMATED) > 0\n\n/** Returns true if the `target` is animating (even if paused). */\nexport const isAnimating = (target: any) => (target[$P] & IS_ANIMATING) > 0\n\n/** Returns true if the `target` is paused (even if idle). */\nexport const isPaused = (target: any) => (target[$P] & IS_PAUSED) > 0\n\n/** Set the active bit of the `target` phase. */\nexport const setActiveBit = (target: any, active: boolean) =>\n  active\n    ? (target[$P] |= IS_ANIMATING | HAS_ANIMATED)\n    : (target[$P] &= ~IS_ANIMATING)\n\nexport const setPausedBit = (target: any, paused: boolean) =>\n  paused ? (target[$P] |= IS_PAUSED) : (target[$P] &= ~IS_PAUSED)\n","import { OneOrMore, UnknownProps, Lookup, Falsy } from '@react-spring/types'\nimport {\n  is,\n  raf,\n  each,\n  noop,\n  flush,\n  toArray,\n  eachProp,\n  flushCalls,\n  addFluidObserver,\n  FluidObserver,\n} from '@react-spring/shared'\n\nimport { getDefaultProp } from './helpers'\nimport { FrameValue } from './FrameValue'\nimport type { SpringRef } from './SpringRef'\nimport { SpringValue, createLoopUpdate, createUpdate } from './SpringValue'\nimport { getCancelledResult, getCombinedResult } from './AnimationResult'\nimport { runAsync, RunAsyncState, stopAsync } from './runAsync'\nimport { scheduleProps } from './scheduleProps'\nimport {\n  AnimationResult,\n  AsyncResult,\n  ControllerFlushFn,\n  ControllerUpdate,\n  OnChange,\n  OnRest,\n  OnStart,\n  SpringChain,\n  SpringToFn,\n  SpringValues,\n} from './types'\n\n/** Events batched by the `Controller` class */\nconst BATCHED_EVENTS = ['onStart', 'onChange', 'onRest'] as const\n\nlet nextId = 1\n\n/** Queue of pending updates for a `Controller` instance. */\nexport interface ControllerQueue<State extends Lookup = Lookup>\n  extends Array<\n    ControllerUpdate<State, any> & {\n      /** The keys affected by this update. When null, all keys are affected. */\n      keys: string[] | null\n    }\n  > {}\n\nexport class Controller<State extends Lookup = Lookup> {\n  readonly id = nextId++\n\n  /** The animated values */\n  springs: SpringValues<State> = {} as any\n\n  /** The queue of props passed to the `update` method. */\n  queue: ControllerQueue<State> = []\n\n  /**\n   * The injected ref. When defined, render-based updates are pushed\n   * onto the `queue` instead of being auto-started.\n   */\n  ref?: SpringRef<State>\n\n  /** Custom handler for flushing update queues */\n  protected _flush?: ControllerFlushFn<this>\n\n  /** These props are used by all future spring values */\n  protected _initialProps?: Lookup\n\n  /** The counter for tracking `scheduleProps` calls */\n  protected _lastAsyncId = 0\n\n  /** The values currently being animated */\n  protected _active = new Set<FrameValue>()\n\n  /** The values that changed recently */\n  protected _changed = new Set<FrameValue>()\n\n  /** Equals false when `onStart` listeners can be called */\n  protected _started = false\n\n  private _item?: any\n\n  /** State used by the `runAsync` function */\n  protected _state: RunAsyncState<this> = {\n    paused: false,\n    pauseQueue: new Set(),\n    resumeQueue: new Set(),\n    timeouts: new Set(),\n  }\n\n  /** The event queues that are flushed once per frame maximum */\n  protected _events = {\n    onStart: new Map<\n      OnStart<SpringValue<State>, Controller<State>, any>,\n      AnimationResult\n    >(),\n    onChange: new Map<\n      OnChange<SpringValue<State>, Controller<State>, any>,\n      AnimationResult\n    >(),\n    onRest: new Map<\n      OnRest<SpringValue<State>, Controller<State>, any>,\n      AnimationResult\n    >(),\n  }\n\n  constructor(\n    props?: ControllerUpdate<State> | null,\n    flush?: ControllerFlushFn<any>\n  ) {\n    this._onFrame = this._onFrame.bind(this)\n    if (flush) {\n      this._flush = flush\n    }\n    if (props) {\n      this.start({ default: true, ...props })\n    }\n  }\n\n  /**\n   * Equals `true` when no spring values are in the frameloop, and\n   * no async animation is currently active.\n   */\n  get idle() {\n    return (\n      !this._state.asyncTo &&\n      Object.values(this.springs as Lookup<SpringValue>).every(spring => {\n        return spring.idle && !spring.isDelayed && !spring.isPaused\n      })\n    )\n  }\n\n  get item() {\n    return this._item\n  }\n\n  set item(item) {\n    this._item = item\n  }\n\n  /** Get the current values of our springs */\n  get(): State & UnknownProps {\n    const values: any = {}\n    this.each((spring, key) => (values[key] = spring.get()))\n    return values\n  }\n\n  /** Set the current values without animating. */\n  set(values: Partial<State>) {\n    for (const key in values) {\n      const value = values[key]\n      if (!is.und(value)) {\n        this.springs[key].set(value)\n      }\n    }\n  }\n\n  /** Push an update onto the queue of each value. */\n  update(props: ControllerUpdate<State> | Falsy) {\n    if (props) {\n      this.queue.push(createUpdate(props))\n    }\n    return this\n  }\n\n  /**\n   * Start the queued animations for every spring, and resolve the returned\n   * promise once all queued animations have finished or been cancelled.\n   *\n   * When you pass a queue (instead of nothing), that queue is used instead of\n   * the queued animations added with the `update` method, which are left alone.\n   */\n  start(props?: OneOrMore<ControllerUpdate<State>> | null): AsyncResult<this> {\n    let { queue } = this as any\n    if (props) {\n      queue = toArray<any>(props).map(createUpdate)\n    } else {\n      this.queue = []\n    }\n\n    if (this._flush) {\n      return this._flush(this, queue)\n    }\n\n    prepareKeys(this, queue)\n    return flushUpdateQueue(this, queue)\n  }\n\n  /** Stop all animations. */\n  stop(): this\n  /** Stop animations for the given keys. */\n  stop(keys: OneOrMore<string>): this\n  /** Cancel all animations. */\n  stop(cancel: boolean): this\n  /** Cancel animations for the given keys. */\n  stop(cancel: boolean, keys: OneOrMore<string>): this\n  /** Stop some or all animations. */\n  stop(keys?: OneOrMore<string>): this\n  /** Cancel some or all animations. */\n  stop(cancel: boolean, keys?: OneOrMore<string>): this\n  /** @internal */\n  stop(arg?: boolean | OneOrMore<string>, keys?: OneOrMore<string>) {\n    if (arg !== !!arg) {\n      keys = arg as OneOrMore<string>\n    }\n    if (keys) {\n      const springs = this.springs as Lookup<SpringValue>\n      each(toArray(keys) as string[], key => springs[key].stop(!!arg))\n    } else {\n      stopAsync(this._state, this._lastAsyncId)\n      this.each(spring => spring.stop(!!arg))\n    }\n    return this\n  }\n\n  /** Freeze the active animation in time */\n  pause(keys?: OneOrMore<string>) {\n    if (is.und(keys)) {\n      this.start({ pause: true })\n    } else {\n      const springs = this.springs as Lookup<SpringValue>\n      each(toArray(keys) as string[], key => springs[key].pause())\n    }\n    return this\n  }\n\n  /** Resume the animation if paused. */\n  resume(keys?: OneOrMore<string>) {\n    if (is.und(keys)) {\n      this.start({ pause: false })\n    } else {\n      const springs = this.springs as Lookup<SpringValue>\n      each(toArray(keys) as string[], key => springs[key].resume())\n    }\n    return this\n  }\n\n  /** Call a function once per spring value */\n  each(iterator: (spring: SpringValue, key: string) => void) {\n    eachProp(this.springs, iterator as any)\n  }\n\n  /** @internal Called at the end of every animation frame */\n  protected _onFrame() {\n    const { onStart, onChange, onRest } = this._events\n\n    const active = this._active.size > 0\n    const changed = this._changed.size > 0\n\n    if ((active && !this._started) || (changed && !this._started)) {\n      this._started = true\n      flush(onStart, ([onStart, result]) => {\n        result.value = this.get()\n        onStart(result, this, this._item)\n      })\n    }\n\n    const idle = !active && this._started\n    const values = changed || (idle && onRest.size) ? this.get() : null\n\n    if (changed && onChange.size) {\n      flush(onChange, ([onChange, result]) => {\n        result.value = values\n        onChange(result, this, this._item)\n      })\n    }\n\n    // The \"onRest\" queue is only flushed when all springs are idle.\n    if (idle) {\n      this._started = false\n      flush(onRest, ([onRest, result]) => {\n        result.value = values\n        onRest(result, this, this._item)\n      })\n    }\n  }\n\n  /** @internal */\n  eventObserved(event: FrameValue.Event) {\n    if (event.type == 'change') {\n      this._changed.add(event.parent)\n      if (!event.idle) {\n        this._active.add(event.parent)\n      }\n    } else if (event.type == 'idle') {\n      this._active.delete(event.parent)\n    }\n    // The `onFrame` handler runs when a parent is changed or idle.\n    else return\n    raf.onFrame(this._onFrame)\n  }\n}\n\n/**\n * Warning: Props might be mutated.\n */\nexport function flushUpdateQueue(\n  ctrl: Controller<any>,\n  queue: ControllerQueue\n) {\n  return Promise.all(queue.map(props => flushUpdate(ctrl, props))).then(\n    results => getCombinedResult(ctrl, results)\n  )\n}\n\n/**\n * Warning: Props might be mutated.\n *\n * Process a single set of props using the given controller.\n *\n * The returned promise resolves to `true` once the update is\n * applied and any animations it starts are finished without being\n * stopped or cancelled.\n */\nexport async function flushUpdate(\n  ctrl: Controller<any>,\n  props: ControllerQueue[number],\n  isLoop?: boolean\n): AsyncResult {\n  const { keys, to, from, loop, onRest, onResolve } = props\n  const defaults = is.obj(props.default) && props.default\n\n  // Looping must be handled in this function, or else the values\n  // would end up looping out-of-sync in many common cases.\n  if (loop) {\n    props.loop = false\n  }\n\n  // Treat false like null, which gets ignored.\n  if (to === false) props.to = null\n  if (from === false) props.from = null\n\n  const asyncTo = is.arr(to) || is.fun(to) ? to : undefined\n  if (asyncTo) {\n    props.to = undefined\n    props.onRest = undefined\n    if (defaults) {\n      defaults.onRest = undefined\n    }\n  }\n  // For certain events, use batching to prevent multiple calls per frame.\n  // However, batching is avoided when the `to` prop is async, because any\n  // event props are used as default props instead.\n  else {\n    each(BATCHED_EVENTS, key => {\n      const handler: any = props[key]\n      if (is.fun(handler)) {\n        const queue = ctrl['_events'][key]\n        props[key] = (({ finished, cancelled }: AnimationResult) => {\n          const result = queue.get(handler)\n          if (result) {\n            if (!finished) result.finished = false\n            if (cancelled) result.cancelled = true\n          } else {\n            // The \"value\" is set before the \"handler\" is called.\n            queue.set(handler, {\n              value: null,\n              finished: finished || false,\n              cancelled: cancelled || false,\n            })\n          }\n        }) as any\n\n        // Avoid using a batched `handler` as a default prop.\n        if (defaults) {\n          defaults[key] = props[key] as any\n        }\n      }\n    })\n  }\n\n  const state = ctrl['_state']\n\n  // Pause/resume the `asyncTo` when `props.pause` is true/false.\n  if (props.pause === !state.paused) {\n    state.paused = props.pause\n    flushCalls(props.pause ? state.pauseQueue : state.resumeQueue)\n  }\n  // When a controller is paused, its values are also paused.\n  else if (state.paused) {\n    props.pause = true\n  }\n\n  const promises: AsyncResult[] = (keys || Object.keys(ctrl.springs)).map(key =>\n    ctrl.springs[key]!.start(props as any)\n  )\n\n  const cancel =\n    props.cancel === true || getDefaultProp(props, 'cancel') === true\n\n  if (asyncTo || (cancel && state.asyncId)) {\n    promises.push(\n      scheduleProps(++ctrl['_lastAsyncId'], {\n        props,\n        state,\n        actions: {\n          pause: noop,\n          resume: noop,\n          start(props, resolve) {\n            if (cancel) {\n              stopAsync(state, ctrl['_lastAsyncId'])\n              resolve(getCancelledResult(ctrl))\n            } else {\n              props.onRest = onRest\n              resolve(\n                runAsync(\n                  asyncTo as SpringChain | SpringToFn,\n                  props,\n                  state,\n                  ctrl\n                )\n              )\n            }\n          },\n        },\n      })\n    )\n  }\n\n  // Pause after updating each spring, so they can be resumed separately\n  // and so their default `pause` and `cancel` props are updated.\n  if (state.paused) {\n    // Ensure `this` must be resumed before the returned promise\n    // is resolved and before starting the next `loop` repetition.\n    await new Promise<void>(resume => {\n      state.resumeQueue.add(resume)\n    })\n  }\n\n  const result = getCombinedResult<any>(ctrl, await Promise.all(promises))\n  if (loop && result.finished && !(isLoop && result.noop)) {\n    const nextProps = createLoopUpdate(props, loop, to)\n    if (nextProps) {\n      prepareKeys(ctrl, [nextProps])\n      return flushUpdate(ctrl, nextProps, true)\n    }\n  }\n  if (onResolve) {\n    raf.batchedUpdates(() => onResolve(result, ctrl, ctrl.item))\n  }\n  return result\n}\n\n/**\n * From an array of updates, get the map of `SpringValue` objects\n * by their keys. Springs are created when any update wants to\n * animate a new key.\n *\n * Springs created by `getSprings` are neither cached nor observed\n * until they're given to `setSprings`.\n */\nexport function getSprings<State extends Lookup>(\n  ctrl: Controller<Lookup<any>>,\n  props?: OneOrMore<ControllerUpdate<State>>\n) {\n  const springs = { ...ctrl.springs }\n  if (props) {\n    each(toArray(props), (props: any) => {\n      if (is.und(props.keys)) {\n        props = createUpdate(props)\n      }\n      if (!is.obj(props.to)) {\n        // Avoid passing array/function to each spring.\n        props = { ...props, to: undefined }\n      }\n      prepareSprings(springs as any, props, key => {\n        return createSpring(key)\n      })\n    })\n  }\n  setSprings(ctrl, springs)\n  return springs\n}\n\n/**\n * Tell a controller to manage the given `SpringValue` objects\n * whose key is not already in use.\n */\nexport function setSprings(\n  ctrl: Controller<Lookup<any>>,\n  springs: SpringValues<UnknownProps>\n) {\n  eachProp(springs, (spring, key) => {\n    if (!ctrl.springs[key]) {\n      ctrl.springs[key] = spring\n      addFluidObserver(spring, ctrl)\n    }\n  })\n}\n\nfunction createSpring(key: string, observer?: FluidObserver<FrameValue.Event>) {\n  const spring = new SpringValue()\n  spring.key = key\n  if (observer) {\n    addFluidObserver(spring, observer)\n  }\n  return spring\n}\n\n/**\n * Ensure spring objects exist for each defined key.\n *\n * Using the `props`, the `Animated` node of each `SpringValue` may\n * be created or updated.\n */\nfunction prepareSprings(\n  springs: SpringValues,\n  props: ControllerQueue[number],\n  create: (key: string) => SpringValue\n) {\n  if (props.keys) {\n    each(props.keys, key => {\n      const spring = springs[key] || (springs[key] = create(key))\n      spring['_prepareNode'](props)\n    })\n  }\n}\n\n/**\n * Ensure spring objects exist for each defined key, and attach the\n * `ctrl` to them for observation.\n *\n * The queue is expected to contain `createUpdate` results.\n */\nfunction prepareKeys(ctrl: Controller<any>, queue: ControllerQueue[number][]) {\n  each(queue, props => {\n    prepareSprings(ctrl.springs, props, key => {\n      return createSpring(key, ctrl)\n    })\n  })\n}\n","import * as React from 'react'\nimport { useContext, PropsWithChildren } from 'react'\nimport { useMemoOne } from '@react-spring/shared'\n\n/**\n * This context affects all new and existing `SpringValue` objects\n * created with the hook API or the renderprops API.\n */\nexport interface SpringContext {\n  /** Pause all new and existing animations. */\n  pause?: boolean\n  /** Force all new and existing animations to be immediate. */\n  immediate?: boolean\n}\n\nexport const SpringContext = ({\n  children,\n  ...props\n}: PropsWithChildren<SpringContext>) => {\n  const inherited = useContext(ctx)\n\n  // Inherited values are dominant when truthy.\n  const pause = props.pause || !!inherited.pause,\n    immediate = props.immediate || !!inherited.immediate\n\n  // Memoize the context to avoid unwanted renders.\n  props = useMemoOne(() => ({ pause, immediate }), [pause, immediate])\n\n  const { Provider } = ctx\n  return <Provider value={props}>{children}</Provider>\n}\n\nconst ctx = makeContext(SpringContext, {} as SpringContext)\n\n// Allow `useContext(SpringContext)` in TypeScript.\nSpringContext.Provider = ctx.Provider\nSpringContext.Consumer = ctx.Consumer\n\n/** Make the `target` compatible with `useContext` */\nfunction makeContext<T>(target: any, init: T): React.Context<T> {\n  Object.assign(target, React.createContext(init))\n  target.Provider._context = target\n  target.Consumer._context = target\n  return target\n}\n","import { each, is, deprecateDirectCall } from '@react-spring/shared'\nimport { Lookup, Falsy, OneOrMore } from '@react-spring/types'\nimport { AsyncResult, ControllerUpdate } from './types'\nimport { Controller } from './Controller'\n\nexport interface ControllerUpdateFn<State extends Lookup = Lookup> {\n  (i: number, ctrl: Controller<State>): ControllerUpdate<State> | Falsy\n}\n\nexport interface SpringRef<State extends Lookup = Lookup> {\n  (props?: ControllerUpdate<State> | ControllerUpdateFn<State>): AsyncResult<\n    Controller<State>\n  >[]\n  current: Controller<State>[]\n\n  /** Add a controller to this ref */\n  add(ctrl: Controller<State>): void\n\n  /** Remove a controller from this ref */\n  delete(ctrl: Controller<State>): void\n\n  /** Pause all animations. */\n  pause(): this\n  /** Pause animations for the given keys. */\n  pause(keys: OneOrMore<string>): this\n  /** Pause some or all animations. */\n  pause(keys?: OneOrMore<string>): this\n\n  /** Resume all animations. */\n  resume(): this\n  /** Resume animations for the given keys. */\n  resume(keys: OneOrMore<string>): this\n  /** Resume some or all animations. */\n  resume(keys?: OneOrMore<string>): this\n\n  /** Update the state of each controller without animating. */\n  set(values: Partial<State>): void\n  /** Update the state of each controller without animating based on their passed state. */\n  set(values: (index: number, ctrl: Controller<State>) => Partial<State>): void\n\n  /** Start the queued animations of each controller. */\n  start(): AsyncResult<Controller<State>>[]\n  /** Update every controller with the same props. */\n  start(props: ControllerUpdate<State>): AsyncResult<Controller<State>>[]\n  /** Update controllers based on their state. */\n  start(props: ControllerUpdateFn<State>): AsyncResult<Controller<State>>[]\n  /** Start animating each controller. */\n  start(\n    props?: ControllerUpdate<State> | ControllerUpdateFn<State>\n  ): AsyncResult<Controller<State>>[]\n\n  /** Stop all animations. */\n  stop(): this\n  /** Stop animations for the given keys. */\n  stop(keys: OneOrMore<string>): this\n  /** Cancel all animations. */\n  stop(cancel: boolean): this\n  /** Cancel animations for the given keys. */\n  stop(cancel: boolean, keys: OneOrMore<string>): this\n  /** Stop some or all animations. */\n  stop(keys?: OneOrMore<string>): this\n  /** Cancel some or all animations. */\n  stop(cancel: boolean, keys?: OneOrMore<string>): this\n\n  /** Add the same props to each controller's update queue. */\n  update(props: ControllerUpdate<State>): this\n  /** Generate separate props for each controller's update queue. */\n  update(props: ControllerUpdateFn<State>): this\n  /** Add props to each controller's update queue. */\n  update(props: ControllerUpdate<State> | ControllerUpdateFn<State>): this\n\n  _getProps(\n    arg: ControllerUpdate<State> | ControllerUpdateFn<State>,\n    ctrl: Controller<State>,\n    index: number\n  ): ControllerUpdate<State> | Falsy\n}\n\nexport const SpringRef = <\n  State extends Lookup = Lookup\n>(): SpringRef<State> => {\n  const current: Controller<State>[] = []\n\n  const SpringRef: SpringRef<State> = function (props) {\n    deprecateDirectCall()\n\n    const results: AsyncResult[] = []\n\n    each(current, (ctrl, i) => {\n      if (is.und(props)) {\n        results.push(ctrl.start())\n      } else {\n        const update = _getProps(props, ctrl, i)\n        if (update) {\n          results.push(ctrl.start(update))\n        }\n      }\n    })\n\n    return results\n  }\n\n  SpringRef.current = current\n\n  /** Add a controller to this ref */\n  SpringRef.add = function (ctrl: Controller<State>) {\n    if (!current.includes(ctrl)) {\n      current.push(ctrl)\n    }\n  }\n\n  /** Remove a controller from this ref */\n  SpringRef.delete = function (ctrl: Controller<State>) {\n    const i = current.indexOf(ctrl)\n    if (~i) current.splice(i, 1)\n  }\n\n  /** Pause all animations. */\n  SpringRef.pause = function () {\n    each(current, ctrl => ctrl.pause(...arguments))\n    return this\n  }\n\n  /** Resume all animations. */\n  SpringRef.resume = function () {\n    each(current, ctrl => ctrl.resume(...arguments))\n    return this\n  }\n\n  /** Update the state of each controller without animating. */\n  SpringRef.set = function (\n    values:\n      | Partial<State>\n      | ((i: number, ctrl: Controller<State>) => Partial<State>)\n  ) {\n    each(current, (ctrl, i) => {\n      const update = is.fun(values) ? values(i, ctrl) : values\n      if (update) {\n        ctrl.set(update)\n      }\n    })\n  }\n\n  SpringRef.start = function (props?: object | ControllerUpdateFn<State>) {\n    const results: AsyncResult[] = []\n\n    each(current, (ctrl, i) => {\n      if (is.und(props)) {\n        results.push(ctrl.start())\n      } else {\n        const update = this._getProps(props, ctrl, i)\n        if (update) {\n          results.push(ctrl.start(update))\n        }\n      }\n    })\n\n    return results\n  }\n\n  /** Stop all animations. */\n  SpringRef.stop = function () {\n    each(current, ctrl => ctrl.stop(...arguments))\n    return this\n  }\n\n  SpringRef.update = function (props: object | ControllerUpdateFn<State>) {\n    each(current, (ctrl, i) => ctrl.update(this._getProps(props, ctrl, i)))\n    return this\n  }\n\n  /** Overridden by `useTrail` to manipulate props */\n  const _getProps = function (\n    arg: ControllerUpdate<State> | ControllerUpdateFn<State>,\n    ctrl: Controller<State>,\n    index: number\n  ) {\n    return is.fun(arg) ? arg(index, ctrl) : arg\n  }\n\n  SpringRef._getProps = _getProps\n\n  return SpringRef\n}\n","import { useState } from 'react'\nimport { Lookup } from '@react-spring/types'\nimport { SpringRef } from '../SpringRef'\nimport type { SpringRef as SpringRefType } from '../SpringRef'\n\nconst initSpringRef = () => SpringRef<any>()\n\nexport const useSpringRef = <State extends Lookup = Lookup>() =>\n  useState(initSpringRef)[0] as SpringRefType<State>\n","import { useConstant, useOnce } from '@react-spring/shared'\n\nimport { SpringValue } from '../SpringValue'\nimport { SpringUpdate } from '../types'\n\n/**\n * Creates a constant single `SpringValue` that can be interacted\n * with imperatively. This is an advanced API and does not react\n * to updates from the parent component e.g. passing a new initial value\n *\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const opacity = useSpringValue(1)\n *\n *   return <animated.div style={{ opacity }} />\n * }\n * ```\n *\n * @param initial – The initial value of the `SpringValue`.\n * @param props – Typically the same props as `useSpring` e.g. `config`, `loop` etc.\n *\n * @public\n */\nexport const useSpringValue = <T>(\n  initial: Exclude<T, object>,\n  props?: SpringUpdate<T>\n) => {\n  const springValue = useConstant(() => new SpringValue(initial, props))\n\n  useOnce(() => () => {\n    springValue.stop()\n  })\n\n  return springValue\n}\n","import { each, is, useIsomorphicLayoutEffect } from '@react-spring/shared'\nimport { Lookup } from '@react-spring/types'\n\nimport { Valid } from '../types/common'\nimport { PickAnimated, SpringValues } from '../types'\n\nimport { SpringRef } from '../SpringRef'\nimport { Controller } from '../Controller'\n\nimport { UseSpringProps } from './useSpring'\nimport { useSprings } from './useSprings'\nimport { replaceRef } from '../helpers'\n\nexport type UseTrailProps<Props extends object = any> = UseSpringProps<Props>\n\nexport function useTrail<Props extends object>(\n  length: number,\n  props: (\n    i: number,\n    ctrl: Controller\n  ) => UseTrailProps | (Props & Valid<Props, UseTrailProps<Props>>),\n  deps?: readonly any[]\n): PickAnimated<Props> extends infer State\n  ? State extends Lookup<any>\n    ? [SpringValues<State>[], SpringRef<State>]\n    : never\n  : never\n\n/**\n * This hook is an abstraction around `useSprings` and is designed to\n * automatically orchestrate the springs to stagger one after the other\n *\n * ```jsx\n * export const MyComponent = () => {\n *  const trails = useTrail(3, {opacity: 0})\n *\n *  return trails.map(styles => <animated.div style={styles} />)\n * }\n * ```\n *\n * @param length – The number of springs you want to create\n * @param propsArg – The props to pass to the internal `useSprings` hook,\n * therefore is the same as `useSprings`.\n *\n * @public\n */\nexport function useTrail<Props extends object>(\n  length: number,\n  props: UseTrailProps | (Props & Valid<Props, UseTrailProps<Props>>)\n): SpringValues<PickAnimated<Props>>[]\n\n/**\n * This hook is an abstraction around `useSprings` and is designed to\n * automatically orchestrate the springs to stagger one after the other\n *\n * ```jsx\n * export const MyComponent = () => {\n *  const trails = useTrail(3, {opacity: 0}, [])\n *\n *  return trails.map(styles => <animated.div style={styles} />)\n * }\n * ```\n *\n * @param length – The number of springs you want to create\n * @param propsArg – The props to pass to the internal `useSprings` hook,\n * therefore is the same as `useSprings`.\n * @param deps – The optional array of dependencies to pass to the internal\n * `useSprings` hook, therefore is the same as `useSprings`.\n *\n * @public\n */\nexport function useTrail<Props extends object>(\n  length: number,\n  props: UseTrailProps | (Props & Valid<Props, UseTrailProps<Props>>),\n  deps: readonly any[]\n): PickAnimated<Props> extends infer State\n  ? State extends Lookup<any>\n    ? [SpringValues<State>[], SpringRef<State>]\n    : never\n  : never\n\nexport function useTrail(\n  length: number,\n  propsArg: unknown,\n  deps?: readonly any[]\n) {\n  const propsFn = is.fun(propsArg) && propsArg\n  if (propsFn && !deps) deps = []\n\n  // The trail is reversed when every render-based update is reversed.\n  let reverse = true\n  let passedRef: SpringRef | undefined = undefined\n\n  const result = useSprings(\n    length,\n    (i, ctrl) => {\n      const props = propsFn ? propsFn(i, ctrl) : propsArg\n      passedRef = props.ref\n      reverse = reverse && props.reverse\n\n      return props\n    },\n    // Ensure the props function is called when no deps exist.\n    // This works around the 3 argument rule.\n    deps || [{}]\n  )\n\n  useIsomorphicLayoutEffect(() => {\n    /**\n     * Run through the ref passed by the `useSprings` hook.\n     */\n    each(result[1].current, (ctrl, i) => {\n      const parent = result[1].current[i + (reverse ? 1 : -1)]\n\n      /**\n       * If there's a passed ref then we replace the ctrl ref with it\n       */\n      replaceRef(ctrl, passedRef)\n\n      /**\n       * And if there's a ctrl ref then we update instead of start\n       * which means nothing is fired until the start method\n       * of said passedRef is called.\n       */\n      if (ctrl.ref) {\n        if (parent) {\n          ctrl.update({ to: parent.springs })\n        }\n\n        return\n      }\n\n      if (parent) {\n        ctrl.start({ to: parent.springs })\n      } else {\n        ctrl.start()\n      }\n    })\n  }, deps)\n\n  if (propsFn || arguments.length == 3) {\n    const ref = passedRef ?? result[1]\n\n    ref['_getProps'] = (propsArg, ctrl, i) => {\n      const props = is.fun(propsArg) ? propsArg(i, ctrl) : propsArg\n      if (props) {\n        const parent = ref.current[i + (props.reverse ? 1 : -1)]\n        if (parent) props.to = parent.springs\n        return props\n      }\n    }\n    return result\n  }\n\n  return result[0]\n}\n","import * as React from 'react'\nimport { useContext, useRef, useMemo } from 'react'\nimport { Lookup, OneOrMore, UnknownProps } from '@react-spring/types'\nimport {\n  is,\n  toArray,\n  useForceUpdate,\n  useOnce,\n  usePrev,\n  each,\n  useIsomorphicLayoutEffect,\n} from '@react-spring/shared'\n\nimport {\n  Change,\n  ControllerUpdate,\n  ItemKeys,\n  PickAnimated,\n  TransitionFn,\n  TransitionState,\n  TransitionTo,\n  UseTransitionProps,\n} from '../types'\nimport { Valid } from '../types/common'\nimport {\n  callProp,\n  detachRefs,\n  getDefaultProps,\n  hasProps,\n  inferTo,\n  replaceRef,\n} from '../helpers'\nimport { Controller, getSprings } from '../Controller'\nimport { SpringContext } from '../SpringContext'\nimport { SpringRef } from '../SpringRef'\nimport type { SpringRef as SpringRefType } from '../SpringRef'\nimport { TransitionPhase } from '../TransitionPhase'\n\ndeclare function setTimeout(handler: Function, timeout?: number): number\ndeclare function clearTimeout(timeoutId: number): void\n\nexport function useTransition<Item, Props extends object>(\n  data: OneOrMore<Item>,\n  props: () =>\n    | UseTransitionProps<Item>\n    | (Props & Valid<Props, UseTransitionProps<Item>>),\n  deps?: any[]\n): PickAnimated<Props> extends infer State\n  ? State extends Lookup\n    ? [TransitionFn<Item, PickAnimated<Props>>, SpringRefType<State>]\n    : never\n  : never\n\nexport function useTransition<Item, Props extends object>(\n  data: OneOrMore<Item>,\n  props:\n    | UseTransitionProps<Item>\n    | (Props & Valid<Props, UseTransitionProps<Item>>)\n): TransitionFn<Item, PickAnimated<Props>>\n\nexport function useTransition<Item, Props extends object>(\n  data: OneOrMore<Item>,\n  props:\n    | UseTransitionProps<Item>\n    | (Props & Valid<Props, UseTransitionProps<Item>>),\n  deps: any[] | undefined\n): PickAnimated<Props> extends infer State\n  ? State extends Lookup\n    ? [TransitionFn<Item, State>, SpringRefType<State>]\n    : never\n  : never\n\nexport function useTransition(\n  data: unknown,\n  props: UseTransitionProps | (() => any),\n  deps?: any[]\n): any {\n  const propsFn = is.fun(props) && props\n\n  const {\n    reset,\n    sort,\n    trail = 0,\n    expires = true,\n    exitBeforeEnter = false,\n    onDestroyed,\n    ref: propsRef,\n    config: propsConfig,\n  }: UseTransitionProps<any> = propsFn ? propsFn() : props\n\n  // Return a `SpringRef` if a deps array was passed.\n  const ref = useMemo(\n    () => (propsFn || arguments.length == 3 ? SpringRef() : void 0),\n    []\n  )\n\n  // Every item has its own transition.\n  const items = toArray(data)\n  const transitions: TransitionState[] = []\n\n  // The \"onRest\" callbacks need a ref to the latest transitions.\n  const usedTransitions = useRef<TransitionState[] | null>(null)\n  const prevTransitions = reset ? null : usedTransitions.current\n\n  useIsomorphicLayoutEffect(() => {\n    usedTransitions.current = transitions\n  })\n\n  useOnce(() => {\n    /**\n     * If transitions exist on mount of the component\n     * then reattach their refs on-mount, this was required\n     * for react18 strict mode to work properly.\n     *\n     * See https://github.com/pmndrs/react-spring/issues/1890\n     */\n\n    each(transitions, t => {\n      ref?.add(t.ctrl)\n      t.ctrl.ref = ref\n    })\n\n    // Destroy all transitions on dismount.\n    return () => {\n      each(usedTransitions.current!, t => {\n        if (t.expired) {\n          clearTimeout(t.expirationId!)\n        }\n        detachRefs(t.ctrl, ref)\n        t.ctrl.stop(true)\n      })\n    }\n  })\n\n  // Keys help with reusing transitions between renders.\n  // The `key` prop can be undefined (which means the items themselves are used\n  // as keys), or a function (which maps each item to its key), or an array of\n  // keys (which are assigned to each item by index).\n  const keys = getKeys(items, propsFn ? propsFn() : props, prevTransitions)\n\n  // Expired transitions that need clean up.\n  const expired = (reset && usedTransitions.current) || []\n  useIsomorphicLayoutEffect(() =>\n    each(expired, ({ ctrl, item, key }) => {\n      detachRefs(ctrl, ref)\n      callProp(onDestroyed, item, key)\n    })\n  )\n\n  // Map old indices to new indices.\n  const reused: number[] = []\n  if (prevTransitions)\n    each(prevTransitions, (t, i) => {\n      // Expired transitions are not rendered.\n      if (t.expired) {\n        clearTimeout(t.expirationId!)\n        expired.push(t)\n      } else {\n        i = reused[i] = keys.indexOf(t.key)\n        if (~i) transitions[i] = t\n      }\n    })\n\n  // Mount new items with fresh transitions.\n  each(items, (item, i) => {\n    if (!transitions[i]) {\n      transitions[i] = {\n        key: keys[i],\n        item,\n        phase: TransitionPhase.MOUNT,\n        ctrl: new Controller(),\n      }\n\n      transitions[i].ctrl.item = item\n    }\n  })\n\n  // Update the item of any transition whose key still exists,\n  // and ensure leaving transitions are rendered until they finish.\n  if (reused.length) {\n    let i = -1\n    const { leave }: UseTransitionProps<any> = propsFn ? propsFn() : props\n    each(reused, (keyIndex, prevIndex) => {\n      const t = prevTransitions![prevIndex]\n      if (~keyIndex) {\n        i = transitions.indexOf(t)\n        transitions[i] = { ...t, item: items[keyIndex] }\n      } else if (leave) {\n        transitions.splice(++i, 0, t)\n      }\n    })\n  }\n\n  if (is.fun(sort)) {\n    transitions.sort((a, b) => sort(a.item, b.item))\n  }\n\n  // Track cumulative delay for the \"trail\" prop.\n  let delay = -trail\n\n  // Expired transitions use this to dismount.\n  const forceUpdate = useForceUpdate()\n\n  // These props are inherited by every phase change.\n  const defaultProps = getDefaultProps<UseTransitionProps>(props)\n  // Generate changes to apply in useEffect.\n  const changes = new Map<TransitionState, Change>()\n  const exitingTransitions = useRef(new Map<TransitionState, Change>())\n\n  const forceChange = useRef(false)\n  each(transitions, (t, i) => {\n    const key = t.key\n    const prevPhase = t.phase\n\n    const p: UseTransitionProps<any> = propsFn ? propsFn() : props\n\n    let to: TransitionTo<any>\n    let phase: TransitionPhase\n\n    const propsDelay = callProp(p.delay || 0, key)\n\n    if (prevPhase == TransitionPhase.MOUNT) {\n      to = p.enter\n      phase = TransitionPhase.ENTER\n    } else {\n      const isLeave = keys.indexOf(key) < 0\n      if (prevPhase != TransitionPhase.LEAVE) {\n        if (isLeave) {\n          to = p.leave\n          phase = TransitionPhase.LEAVE\n        } else if ((to = p.update)) {\n          phase = TransitionPhase.UPDATE\n        } else return\n      } else if (!isLeave) {\n        to = p.enter\n        phase = TransitionPhase.ENTER\n      } else return\n    }\n\n    // When \"to\" is a function, it can return (1) an array of \"useSpring\" props,\n    // (2) an async function, or (3) an object with any \"useSpring\" props.\n    to = callProp(to, t.item, i)\n    to = is.obj(to) ? inferTo(to) : { to }\n\n    /**\n     * This would allow us to give different delays for phases.\n     * If we were to do this, we'd have to suffle the prop\n     * spreading below to set delay last.\n     * But if we were going to do that, we should consider letting\n     * the prop trail also be part of a phase.\n     */\n    // if (to.delay) {\n    //   phaseDelay = callProp(to.delay, key)\n    // }\n\n    if (!to.config) {\n      const config = propsConfig || defaultProps.config\n      to.config = callProp(config, t.item, i, phase)\n    }\n\n    delay += trail\n\n    // The payload is used to update the spring props once the current render is committed.\n    const payload: ControllerUpdate<UnknownProps> = {\n      ...defaultProps,\n      // we need to add our props.delay value you here.\n      delay: propsDelay + delay,\n      ref: propsRef,\n      immediate: p.immediate,\n      // This prevents implied resets.\n      reset: false,\n      // Merge any phase-specific props.\n      ...(to as any),\n    }\n\n    if (phase == TransitionPhase.ENTER && is.und(payload.from)) {\n      const p = propsFn ? propsFn() : props\n      // The `initial` prop is used on the first render of our parent component,\n      // as well as when `reset: true` is passed. It overrides the `from` prop\n      // when defined, and it makes `enter` instant when null.\n      const from = is.und(p.initial) || prevTransitions ? p.from : p.initial\n\n      payload.from = callProp(from, t.item, i)\n    }\n\n    const { onResolve } = payload\n    payload.onResolve = result => {\n      callProp(onResolve, result)\n\n      const transitions = usedTransitions.current!\n      const t = transitions.find(t => t.key === key)\n      if (!t) return\n\n      // Reset the phase of a cancelled enter/leave transition, so it can\n      // retry the animation on the next render.\n      if (result.cancelled && t.phase != TransitionPhase.UPDATE) {\n        /**\n         * @legacy Reset the phase of a cancelled enter/leave transition, so it can\n         * retry the animation on the next render.\n         *\n         * Note: leaving this here made the transitioned item respawn.\n         */\n        // t.phase = prevPhase\n        return\n      }\n\n      if (t.ctrl.idle) {\n        const idle = transitions.every(t => t.ctrl.idle)\n        if (t.phase == TransitionPhase.LEAVE) {\n          const expiry = callProp(expires, t.item)\n          if (expiry !== false) {\n            const expiryMs = expiry === true ? 0 : expiry\n            t.expired = true\n\n            // Force update once the expiration delay ends.\n            if (!idle && expiryMs > 0) {\n              // The maximum timeout is 2^31-1\n              if (expiryMs <= 0x7fffffff)\n                t.expirationId = setTimeout(forceUpdate, expiryMs)\n              return\n            }\n          }\n        }\n        // Force update once idle and expired items exist.\n        if (idle && transitions.some(t => t.expired)) {\n          /**\n           * Remove the exited transition from the list\n           * this may not exist but we'll try anyway.\n           */\n          exitingTransitions.current.delete(t)\n\n          if (exitBeforeEnter) {\n            /**\n             * If we have exitBeforeEnter == true\n             * we need to force the animation to start\n             */\n            forceChange.current = true\n          }\n\n          forceUpdate()\n        }\n      }\n    }\n\n    const springs = getSprings(t.ctrl, payload)\n\n    /**\n     * Make a separate map for the exiting changes and \"regular\" changes\n     */\n    if (phase === TransitionPhase.LEAVE && exitBeforeEnter) {\n      exitingTransitions.current.set(t, { phase, springs, payload })\n    } else {\n      changes.set(t, { phase, springs, payload })\n    }\n  })\n\n  // The prop overrides from an ancestor.\n  const context = useContext(SpringContext)\n  const prevContext = usePrev(context)\n  const hasContext = context !== prevContext && hasProps(context)\n\n  // Merge the context into each transition.\n  useIsomorphicLayoutEffect(() => {\n    if (hasContext) {\n      each(transitions, t => {\n        t.ctrl.start({ default: context })\n      })\n    }\n  }, [context])\n\n  each(changes, (_, t) => {\n    /**\n     * If we have children to exit because exitBeforeEnter is\n     * set to true, we remove the transitions so they go to back\n     * to their initial state.\n     */\n    if (exitingTransitions.current.size) {\n      const ind = transitions.findIndex(state => state.key === t.key)\n      transitions.splice(ind, 1)\n    }\n  })\n\n  useIsomorphicLayoutEffect(\n    () => {\n      /*\n       * if exitingTransitions.current has a size it means we're exiting before enter\n       * so we want to map through those and fire those first.\n       */\n      each(\n        exitingTransitions.current.size ? exitingTransitions.current : changes,\n        ({ phase, payload }, t) => {\n          const { ctrl } = t\n\n          t.phase = phase\n\n          // Attach the controller to our local ref.\n          ref?.add(ctrl)\n\n          // Merge the context into new items.\n          if (hasContext && phase == TransitionPhase.ENTER) {\n            ctrl.start({ default: context })\n          }\n\n          if (payload) {\n            // Update the injected ref if needed.\n            replaceRef(ctrl, payload.ref)\n\n            /**\n             * When an injected ref exists, the update is postponed\n             * until the ref has its `start` method called.\n             * Unless we have exitBeforeEnter in which case will skip\n             * to enter the new animation straight away as if they \"overlapped\"\n             */\n            if ((ctrl.ref || ref) && !forceChange.current) {\n              ctrl.update(payload)\n            } else {\n              ctrl.start(payload)\n\n              if (forceChange.current) {\n                forceChange.current = false\n              }\n            }\n          }\n        }\n      )\n    },\n    reset ? void 0 : deps\n  )\n\n  const renderTransitions: TransitionFn = render => (\n    <>\n      {transitions.map((t, i) => {\n        const { springs } = changes.get(t) || t.ctrl\n        const elem: any = render({ ...springs }, t.item, t, i)\n        return elem && elem.type ? (\n          <elem.type\n            {...elem.props}\n            key={is.str(t.key) || is.num(t.key) ? t.key : t.ctrl.id}\n            ref={elem.ref}\n          />\n        ) : (\n          elem\n        )\n      })}\n    </>\n  )\n\n  return ref ? [renderTransitions, ref] : renderTransitions\n}\n\n/** Local state for auto-generated item keys */\nlet nextKey = 1\n\nfunction getKeys(\n  items: readonly any[],\n  { key, keys = key }: { key?: ItemKeys; keys?: ItemKeys },\n  prevTransitions: TransitionState[] | null\n): readonly any[] {\n  if (keys === null) {\n    const reused = new Set()\n    return items.map(item => {\n      const t =\n        prevTransitions &&\n        prevTransitions.find(\n          t =>\n            t.item === item &&\n            t.phase !== TransitionPhase.LEAVE &&\n            !reused.has(t)\n        )\n      if (t) {\n        reused.add(t)\n        return t.key\n      }\n      return nextKey++\n    })\n  }\n  return is.und(keys) ? items : is.fun(keys) ? items.map(keys) : toArray(keys)\n}\n","import { MutableRefObject } from 'react'\nimport { each, onScroll, useIsomorphicLayoutEffect } from '@react-spring/shared'\n\nimport { SpringProps, SpringValues } from '../types'\n\nimport { useSpring } from './useSpring'\n\nexport interface UseScrollOptions extends Omit<SpringProps, 'to' | 'from'> {\n  container?: MutableRefObject<HTMLElement>\n}\n\n/**\n * A small utility abstraction around our signature useSpring hook. It's a great way to create\n * a scroll-linked animation. With either the raw value of distance or a 0-1 progress value.\n * You can either use the scroll values of the whole document, or just a specific element.\n *\n * \n ```jsx\n    import { useScroll, animated } from '@react-spring/web'\n\n    function MyComponent() {\n      const { scrollYProgress } = useScroll()\n\n      return (\n        <animated.div style={{ opacity: scrollYProgress }}>\n          Hello World\n        </animated.div>\n      )\n    }\n  ```\n * \n * @param {UseScrollOptions} useScrollOptions options for the useScroll hook.\n * @param {MutableRefObject<HTMLElement>} useScrollOptions.container the container to listen to scroll events on, defaults to the window.\n *\n * @returns {SpringValues<{scrollX: number; scrollY: number; scrollXProgress: number; scrollYProgress: number}>} SpringValues the collection of values returned from the inner hook\n */\nexport const useScroll = ({\n  container,\n  ...springOptions\n}: UseScrollOptions = {}): SpringValues<{\n  scrollX: number\n  scrollY: number\n  scrollXProgress: number\n  scrollYProgress: number\n}> => {\n  const [scrollValues, api] = useSpring(\n    () => ({\n      scrollX: 0,\n      scrollY: 0,\n      scrollXProgress: 0,\n      scrollYProgress: 0,\n      ...springOptions,\n    }),\n    []\n  )\n\n  useIsomorphicLayoutEffect(() => {\n    const cleanupScroll = onScroll(\n      ({ x, y }) => {\n        api.start({\n          scrollX: x.current,\n          scrollXProgress: x.progress,\n          scrollY: y.current,\n          scrollYProgress: y.progress,\n        })\n      },\n      { container: container?.current || undefined }\n    )\n\n    return () => {\n      /**\n       * Stop the springs on unmount.\n       */\n      each(Object.values(scrollValues), value => value.stop())\n\n      cleanupScroll()\n    }\n  }, [])\n\n  return scrollValues\n}\n","import { MutableRefObject } from 'react'\nimport { onResize, each, useIsomorphicLayoutEffect } from '@react-spring/shared'\n\nimport { SpringProps, SpringValues } from '../types'\n\nimport { useSpring } from './useSpring'\n\nexport interface UseResizeOptions extends Omit<SpringProps, 'to' | 'from'> {\n  container?: MutableRefObject<HTMLElement | null | undefined>\n}\n\n/**\n * A small abstraction around the `useSpring` hook. It returns a `SpringValues` \n * object with the `width` and `height` of the element it's attached to & doesn't \n * necessarily have to be attached to the window, by passing a `container` you \n * can observe that element's size instead.\n * \n ```jsx\n    import { useResize, animated } from '@react-spring/web'\n\n    function MyComponent() {\n      const { width } = useResize()\n\n      return (\n        <animated.div style={{ width }}>\n          Hello World\n        </animated.div>\n      )\n    }\n  ```\n * \n * @param {UseResizeOptions} UseResizeOptions options for the useScroll hook.\n * @param {MutableRefObject<HTMLElement>} UseResizeOptions.container the container to listen to scroll events on, defaults to the window.\n *\n * @returns {SpringValues<{width: number; height: number;}>} SpringValues the collection of values returned from the inner hook\n */\nexport const useResize = ({\n  container,\n  ...springOptions\n}: UseResizeOptions): SpringValues<{\n  width: number\n  height: number\n}> => {\n  const [sizeValues, api] = useSpring(\n    () => ({\n      width: 0,\n      height: 0,\n      ...springOptions,\n    }),\n    []\n  )\n\n  useIsomorphicLayoutEffect(() => {\n    const cleanupScroll = onResize(\n      ({ width, height }) => {\n        api.start({\n          width,\n          height,\n          immediate:\n            sizeValues.width.get() === 0 || sizeValues.height.get() === 0,\n        })\n      },\n      { container: container?.current || undefined }\n    )\n\n    return () => {\n      /**\n       * Stop the springs on unmount.\n       */\n      each(Object.values(sizeValues), value => value.stop())\n\n      cleanupScroll()\n    }\n  }, [])\n\n  return sizeValues\n}\n","import { RefObject, useRef, useState } from 'react'\nimport { is, useIsomorphicLayoutEffect } from '@react-spring/shared'\nimport { Lookup } from '@react-spring/types'\n\nimport { PickAnimated, SpringValues } from '../types'\nimport { useSpring, UseSpringProps } from './useSpring'\nimport { Valid } from '../types/common'\n\nexport interface IntersectionArgs\n  extends Omit<IntersectionObserverInit, 'root' | 'threshold'> {\n  root?: React.MutableRefObject<HTMLElement>\n  once?: boolean\n  amount?: 'any' | 'all' | number | number[]\n}\n\nconst defaultThresholdOptions = {\n  any: 0,\n  all: 1,\n}\n\nexport function useInView(args?: IntersectionArgs): [RefObject<any>, boolean]\nexport function useInView<Props extends object>(\n  /**\n   * TODO: make this narrower to only accept reserved props.\n   */\n  props: () => Props & Valid<Props, UseSpringProps<Props>>,\n  args?: IntersectionArgs\n): PickAnimated<Props> extends infer State\n  ? State extends Lookup\n    ? [RefObject<any>, SpringValues<State>]\n    : never\n  : never\nexport function useInView<TElement extends HTMLElement>(\n  props?: (() => UseSpringProps<any>) | IntersectionArgs,\n  args?: IntersectionArgs\n) {\n  const [isInView, setIsInView] = useState(false)\n  const ref = useRef<TElement>()\n\n  const propsFn = is.fun(props) && props\n\n  const springsProps = propsFn ? propsFn() : {}\n  const { to = {}, from = {}, ...restSpringProps } = springsProps\n\n  const intersectionArguments = propsFn ? args : props\n\n  const [springs, api] = useSpring(() => ({ from, ...restSpringProps }), [])\n\n  useIsomorphicLayoutEffect(() => {\n    const element = ref.current\n    const {\n      root,\n      once,\n      amount = 'any',\n      ...restArgs\n    } = intersectionArguments ?? {}\n\n    if (\n      !element ||\n      (once && isInView) ||\n      typeof IntersectionObserver === 'undefined'\n    )\n      return\n\n    const activeIntersections = new WeakMap<Element, VoidFunction>()\n\n    const onEnter = () => {\n      if (to) {\n        api.start(to)\n      }\n\n      setIsInView(true)\n\n      const cleanup = () => {\n        if (from) {\n          api.start(from)\n        }\n        setIsInView(false)\n      }\n\n      return once ? undefined : cleanup\n    }\n\n    const handleIntersection: IntersectionObserverCallback = entries => {\n      entries.forEach(entry => {\n        const onLeave = activeIntersections.get(entry.target)\n\n        if (entry.isIntersecting === Boolean(onLeave)) {\n          return\n        }\n\n        if (entry.isIntersecting) {\n          const newOnLeave = onEnter()\n          if (is.fun(newOnLeave)) {\n            activeIntersections.set(entry.target, newOnLeave)\n          } else {\n            observer.unobserve(entry.target)\n          }\n        } else if (onLeave) {\n          onLeave()\n          activeIntersections.delete(entry.target)\n        }\n      })\n    }\n\n    const observer = new IntersectionObserver(handleIntersection, {\n      root: (root && root.current) || undefined,\n      threshold:\n        typeof amount === 'number' || Array.isArray(amount)\n          ? amount\n          : defaultThresholdOptions[amount],\n      ...restArgs,\n    })\n\n    observer.observe(element)\n\n    return () => observer.unobserve(element)\n  }, [intersectionArguments])\n\n  if (propsFn) {\n    return [ref, springs]\n  }\n\n  return [ref, isInView]\n}\n","import { NoInfer, UnknownProps } from '@react-spring/types'\nimport { useSpring, UseSpringProps } from '../hooks/useSpring'\nimport { SpringValues, SpringToFn, SpringChain } from '../types'\n\nexport type SpringComponentProps<State extends object = UnknownProps> =\n  unknown &\n    UseSpringProps<State> & {\n      children: (values: SpringValues<State>) => JSX.Element | null\n    }\n\n// Infer state from \"from\" object prop.\nexport function Spring<State extends object>(\n  props: {\n    from: State\n    to?: SpringChain<NoInfer<State>> | SpringToFn<NoInfer<State>>\n  } & Omit<SpringComponentProps<NoInfer<State>>, 'from' | 'to'>\n): JSX.Element | null\n\n// Infer state from \"to\" object prop.\nexport function Spring<State extends object>(\n  props: { to: State } & Omit<SpringComponentProps<NoInfer<State>>, 'to'>\n): JSX.Element | null\n\nexport function Spring({ children, ...props }: any) {\n  return children(useSpring(props))\n}\n","import { ReactNode } from 'react'\nimport { NoInfer, Falsy } from '@react-spring/types'\nimport { is } from '@react-spring/shared'\n\nimport { Valid } from '../types/common'\nimport { PickAnimated, SpringValues } from '../types'\nimport { UseSpringProps } from '../hooks/useSpring'\nimport { useTrail } from '../hooks/useTrail'\n\nexport type TrailComponentProps<Item, Props extends object = any> = unknown &\n  UseSpringProps<Props> & {\n    items: readonly Item[]\n    children: (\n      item: NoInfer<Item>,\n      index: number\n    ) => ((values: SpringValues<PickAnimated<Props>>) => ReactNode) | Falsy\n  }\n\nexport function Trail<Item, Props extends TrailComponentProps<Item>>({\n  items,\n  children,\n  ...props\n}: Props & Valid<Props, TrailComponentProps<Item, Props>>) {\n  const trails: any[] = useTrail(items.length, props)\n  return items.map((item, index) => {\n    const result = children(item, index)\n    return is.fun(result) ? result(trails[index]) : result\n  })\n}\n","import { Valid } from '../types/common'\nimport { TransitionComponentProps } from '../types'\nimport { useTransition } from '../hooks'\n\nexport function Transition<Item, Props extends TransitionComponentProps<Item>>(\n  props:\n    | TransitionComponentProps<Item>\n    | (Props & Valid<Props, TransitionComponentProps<Item, Props>>)\n): JSX.Element\n\nexport function Transition({\n  items,\n  children,\n  ...props\n}: TransitionComponentProps<any>) {\n  return useTransition(items, props)(children)\n}\n","import { FluidValue, deprecateInterpolate } from '@react-spring/shared'\nimport {\n  Constrain,\n  OneOrMore,\n  Animatable,\n  ExtrapolateType,\n  InterpolatorConfig,\n  InterpolatorFn,\n} from '@react-spring/types'\nimport { Interpolation } from './Interpolation'\n\n/** Map the value of one or more dependencies */\nexport const to: Interpolator = (source: any, ...args: [any]) =>\n  new Interpolation(source, args)\n\n/** @deprecated Use the `to` export instead */\nexport const interpolate: Interpolator = (source: any, ...args: [any]) => (\n  deprecateInterpolate(), new Interpolation(source, args)\n)\n\n/** Extract the raw value types that are being interpolated */\nexport type Interpolated<T extends ReadonlyArray<any>> = {\n  [P in keyof T]: T[P] extends infer Element\n    ? Element extends FluidValue<infer U>\n      ? U\n      : Element\n    : never\n}\n\n/**\n * This interpolates one or more `FluidValue` objects.\n * The exported `interpolate` function uses this type.\n */\nexport interface Interpolator {\n  // Tuple of parent values\n  <Input extends ReadonlyArray<any>, Output>(\n    parents: Input,\n    interpolator: (...args: Interpolated<Input>) => Output\n  ): Interpolation<Output>\n\n  // Single parent value\n  <Input, Output>(\n    parent: FluidValue<Input> | Input,\n    interpolator: InterpolatorFn<Input, Output>\n  ): Interpolation<Output>\n\n  // Interpolation config\n  <Out>(\n    parents: OneOrMore<FluidValue>,\n    config: InterpolatorConfig<Out>\n  ): Interpolation<Animatable<Out>>\n\n  // Range shortcuts\n  <Out>(\n    parents: OneOrMore<FluidValue<number>> | FluidValue<number[]>,\n    range: readonly number[],\n    output: readonly Constrain<Out, Animatable>[],\n    extrapolate?: ExtrapolateType\n  ): Interpolation<Animatable<Out>>\n}\n","import { Arrify, InterpolatorArgs, InterpolatorFn } from '@react-spring/types'\nimport {\n  is,\n  raf,\n  each,\n  isEqual,\n  toArray,\n  frameLoop,\n  FluidValue,\n  getFluidValue,\n  createInterpolator,\n  Globals as G,\n  callFluidObservers,\n  addFluidObserver,\n  removeFluidObserver,\n  hasFluidValue,\n} from '@react-spring/shared'\n\nimport { FrameValue, isFrameValue } from './FrameValue'\nimport {\n  getAnimated,\n  setAnimated,\n  getAnimatedType,\n  getPayload,\n} from '@react-spring/animated'\n\n/**\n * An `Interpolation` is a memoized value that's computed whenever one of its\n * `FluidValue` dependencies has its value changed.\n *\n * Other `FrameValue` objects can depend on this. For example, passing an\n * `Interpolation` as the `to` prop of a `useSpring` call will trigger an\n * animation toward the memoized value.\n */\nexport class Interpolation<\n  Input = any,\n  Output = any\n> extends FrameValue<Output> {\n  /** Useful for debugging. */\n  key?: string\n\n  /** Equals false when in the frameloop */\n  idle = true\n\n  /** The function that maps inputs values to output */\n  readonly calc: InterpolatorFn<Input, Output>\n\n  /** The inputs which are currently animating */\n  protected _active = new Set<FluidValue>()\n\n  constructor(\n    /** The source of input values */\n    readonly source: unknown,\n    args: InterpolatorArgs<Input, Output>\n  ) {\n    super()\n    this.calc = createInterpolator(...args)\n\n    const value = this._get()\n    const nodeType = getAnimatedType(value)\n\n    // Assume the computed value never changes type.\n    setAnimated(this, nodeType.create(value))\n  }\n\n  advance(_dt?: number) {\n    const value = this._get()\n    const oldValue = this.get()\n    if (!isEqual(value, oldValue)) {\n      getAnimated(this)!.setValue(value)\n      this._onChange(value, this.idle)\n    }\n    // Become idle when all parents are idle or paused.\n    if (!this.idle && checkIdle(this._active)) {\n      becomeIdle(this)\n    }\n  }\n\n  protected _get() {\n    const inputs: Arrify<Input> = is.arr(this.source)\n      ? this.source.map(getFluidValue)\n      : (toArray(getFluidValue(this.source)) as any)\n\n    return this.calc(...inputs)\n  }\n\n  protected _start() {\n    if (this.idle && !checkIdle(this._active)) {\n      this.idle = false\n\n      each(getPayload(this)!, node => {\n        node.done = false\n      })\n\n      if (G.skipAnimation) {\n        raf.batchedUpdates(() => this.advance())\n        becomeIdle(this)\n      } else {\n        frameLoop.start(this)\n      }\n    }\n  }\n\n  // Observe our sources only when we're observed.\n  protected _attach() {\n    let priority = 1\n    each(toArray(this.source), source => {\n      if (hasFluidValue(source)) {\n        addFluidObserver(source, this)\n      }\n      if (isFrameValue(source)) {\n        if (!source.idle) {\n          this._active.add(source)\n        }\n        priority = Math.max(priority, source.priority + 1)\n      }\n    })\n    this.priority = priority\n    this._start()\n  }\n\n  // Stop observing our sources once we have no observers.\n  protected _detach() {\n    each(toArray(this.source), source => {\n      if (hasFluidValue(source)) {\n        removeFluidObserver(source, this)\n      }\n    })\n    this._active.clear()\n    becomeIdle(this)\n  }\n\n  /** @internal */\n  eventObserved(event: FrameValue.Event) {\n    // Update our value when an idle parent is changed,\n    // and enter the frameloop when a parent is resumed.\n    if (event.type == 'change') {\n      if (event.idle) {\n        this.advance()\n      } else {\n        this._active.add(event.parent)\n        this._start()\n      }\n    }\n    // Once all parents are idle, the `advance` method runs one more time,\n    // so we should avoid updating the `idle` status here.\n    else if (event.type == 'idle') {\n      this._active.delete(event.parent)\n    }\n    // Ensure our priority is greater than all parents, which means\n    // our value won't be updated until our parents have updated.\n    else if (event.type == 'priority') {\n      this.priority = toArray(this.source).reduce(\n        (highest: number, parent) =>\n          Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1),\n        0\n      )\n    }\n  }\n}\n\n/** Returns true for an idle source. */\nfunction isIdle(source: any) {\n  return source.idle !== false\n}\n\n/** Return true if all values in the given set are idle or paused. */\nfunction checkIdle(active: Set<FluidValue>) {\n  // Parents can be active even when paused, so the `.every` check\n  // removes us from the frameloop if all active parents are paused.\n  return !active.size || Array.from(active).every(isIdle)\n}\n\n/** Become idle if not already idle. */\nfunction becomeIdle(self: Interpolation) {\n  if (!self.idle) {\n    self.idle = true\n\n    each(getPayload(self)!, node => {\n      node.done = true\n    })\n\n    callFluidObservers(self, {\n      type: 'idle',\n      parent: self,\n    })\n  }\n}\n","import {\n  Globals,\n  frameLoop,\n  createStringInterpolator,\n} from '@react-spring/shared'\nimport { Interpolation } from './Interpolation'\n\n// Sane defaults\nGlobals.assign({\n  createStringInterpolator,\n  to: (source, args) => new Interpolation(source, args),\n})\n\nexport { Globals }\n\n/** Advance all animations by the given time */\nexport const update = frameLoop.advance\n","export * from './hooks'\nexport * from './components'\nexport * from './interpolate'\nexport * from './constants'\nexport * from './globals'\n\nexport { Controller } from './Controller'\nexport { SpringValue } from './SpringValue'\nexport { SpringContext } from './SpringContext'\nexport { SpringRef } from './SpringRef'\n\nexport { FrameValue } from './FrameValue'\nexport { Interpolation } from './Interpolation'\nexport { BailSignal } from './runAsync'\nexport {\n  createInterpolator,\n  useIsomorphicLayoutEffect,\n  useReducedMotion,\n  easings,\n} from '@react-spring/shared'\nexport { inferTo } from './helpers'\n\nexport * from './types'\nexport * from '@react-spring/types'\n"]},"metadata":{},"sourceType":"module"}