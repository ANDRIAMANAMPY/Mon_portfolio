{"ast":null,"code":"import { sync } from '../../frameloop/index.mjs';\nimport { animate } from '../legacy-popmotion/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\n\nconst sampleDelta = 10; //ms\n\nfunction createAcceleratedAnimation(value, valueName, _ref) {\n  let {\n    onUpdate,\n    onComplete,\n    ...options\n  } = _ref;\n  let {\n    keyframes,\n    duration = 0.3,\n    elapsed = 0,\n    ease\n  } = options;\n  /**\n   * If this animation needs pre-generated keyframes then generate.\n   */\n\n  if (options.type === \"spring\" || !isWaapiSupportedEasing(options.ease)) {\n    const sampleAnimation = animate(options);\n    let state = {\n      done: false,\n      value: keyframes[0]\n    };\n    const pregeneratedKeyframes = [];\n    let t = 0;\n\n    while (!state.done) {\n      state = sampleAnimation.sample(t);\n      pregeneratedKeyframes.push(state.value);\n      t += sampleDelta;\n    }\n\n    keyframes = pregeneratedKeyframes;\n    duration = t - sampleDelta;\n    ease = \"linear\";\n  }\n\n  const animation = animateStyle(value.owner.current, valueName, keyframes, { ...options,\n    delay: -elapsed,\n    duration,\n\n    /**\n     * This function is currently not called if ease is provided\n     * as a function so the cast is safe.\n     *\n     * However it would be possible for a future refinement to port\n     * in easing pregeneration from Motion One for browsers that\n     * support the upcoming `linear()` easing function.\n     */\n    ease: ease\n  });\n  /**\n   * Prefer the `onfinish` prop as it's more widely supported than\n   * the `finished` promise.\n   *\n   * Here, we synchronously set the provided MotionValue to the end\n   * keyframe. If we didn't, when the WAAPI animation is finished it would\n   * be removed from the element which would then revert to its old styles.\n   */\n\n  animation.onfinish = () => {\n    value.set(keyframes[keyframes.length - 1]);\n    onComplete && onComplete();\n  };\n  /**\n   * Animation interrupt callback.\n   */\n\n\n  return () => {\n    /**\n     * WAAPI doesn't natively have any interruption capabilities.\n     *\n     * Rather than read commited styles back out of the DOM, we can\n     * create a renderless JS animation and sample it twice to calculate\n     * its current value, \"previous\" value, and therefore allow\n     * Motion to calculate velocity for any subsequent animation.\n     */\n    const {\n      currentTime\n    } = animation;\n\n    if (currentTime) {\n      const sampleAnimation = animate(options);\n      value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n    }\n\n    sync.update(() => animation.cancel());\n  };\n}\n\nexport { createAcceleratedAnimation };","map":{"version":3,"sources":["C:/Users/ANDRIAM'Hajatiana/Desktop/portfolio/portfolio-starter/node_modules/framer-motion/dist/es/animation/waapi/create-accelerated-animation.mjs"],"names":["sync","animate","animateStyle","isWaapiSupportedEasing","sampleDelta","createAcceleratedAnimation","value","valueName","onUpdate","onComplete","options","keyframes","duration","elapsed","ease","type","sampleAnimation","state","done","pregeneratedKeyframes","t","sample","push","animation","owner","current","delay","onfinish","set","length","currentTime","setWithVelocity","update","cancel"],"mappings":"AAAA,SAASA,IAAT,QAAqB,2BAArB;AACA,SAASC,OAAT,QAAwB,+BAAxB;AACA,SAASC,YAAT,QAA6B,aAA7B;AACA,SAASC,sBAAT,QAAuC,cAAvC;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG,EAApB,C,CAAwB;;AACxB,SAASC,0BAAT,CAAoCC,KAApC,EAA2CC,SAA3C,QAA4F;AAAA,MAAtC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,UAAZ;AAAwB,OAAGC;AAA3B,GAAsC;AACxF,MAAI;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,QAAQ,GAAG,GAAxB;AAA6BC,IAAAA,OAAO,GAAG,CAAvC;AAA0CC,IAAAA;AAA1C,MAAmDJ,OAAvD;AACA;AACJ;AACA;;AACI,MAAIA,OAAO,CAACK,IAAR,KAAiB,QAAjB,IAA6B,CAACZ,sBAAsB,CAACO,OAAO,CAACI,IAAT,CAAxD,EAAwE;AACpE,UAAME,eAAe,GAAGf,OAAO,CAACS,OAAD,CAA/B;AACA,QAAIO,KAAK,GAAG;AAAEC,MAAAA,IAAI,EAAE,KAAR;AAAeZ,MAAAA,KAAK,EAAEK,SAAS,CAAC,CAAD;AAA/B,KAAZ;AACA,UAAMQ,qBAAqB,GAAG,EAA9B;AACA,QAAIC,CAAC,GAAG,CAAR;;AACA,WAAO,CAACH,KAAK,CAACC,IAAd,EAAoB;AAChBD,MAAAA,KAAK,GAAGD,eAAe,CAACK,MAAhB,CAAuBD,CAAvB,CAAR;AACAD,MAAAA,qBAAqB,CAACG,IAAtB,CAA2BL,KAAK,CAACX,KAAjC;AACAc,MAAAA,CAAC,IAAIhB,WAAL;AACH;;AACDO,IAAAA,SAAS,GAAGQ,qBAAZ;AACAP,IAAAA,QAAQ,GAAGQ,CAAC,GAAGhB,WAAf;AACAU,IAAAA,IAAI,GAAG,QAAP;AACH;;AACD,QAAMS,SAAS,GAAGrB,YAAY,CAACI,KAAK,CAACkB,KAAN,CAAYC,OAAb,EAAsBlB,SAAtB,EAAiCI,SAAjC,EAA4C,EACtE,GAAGD,OADmE;AAEtEgB,IAAAA,KAAK,EAAE,CAACb,OAF8D;AAGtED,IAAAA,QAHsE;;AAItE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQE,IAAAA,IAAI,EAAEA;AAZgE,GAA5C,CAA9B;AAcA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACIS,EAAAA,SAAS,CAACI,QAAV,GAAqB,MAAM;AACvBrB,IAAAA,KAAK,CAACsB,GAAN,CAAUjB,SAAS,CAACA,SAAS,CAACkB,MAAV,GAAmB,CAApB,CAAnB;AACApB,IAAAA,UAAU,IAAIA,UAAU,EAAxB;AACH,GAHD;AAIA;AACJ;AACA;;;AACI,SAAO,MAAM;AACT;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,UAAM;AAAEqB,MAAAA;AAAF,QAAkBP,SAAxB;;AACA,QAAIO,WAAJ,EAAiB;AACb,YAAMd,eAAe,GAAGf,OAAO,CAACS,OAAD,CAA/B;AACAJ,MAAAA,KAAK,CAACyB,eAAN,CAAsBf,eAAe,CAACK,MAAhB,CAAuBS,WAAW,GAAG1B,WAArC,EAAkDE,KAAxE,EAA+EU,eAAe,CAACK,MAAhB,CAAuBS,WAAvB,EAAoCxB,KAAnH,EAA0HF,WAA1H;AACH;;AACDJ,IAAAA,IAAI,CAACgC,MAAL,CAAY,MAAMT,SAAS,CAACU,MAAV,EAAlB;AACH,GAfD;AAgBH;;AAED,SAAS5B,0BAAT","sourcesContent":["import { sync } from '../../frameloop/index.mjs';\nimport { animate } from '../legacy-popmotion/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\n\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    let { keyframes, duration = 0.3, elapsed = 0, ease } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (options.type === \"spring\" || !isWaapiSupportedEasing(options.ease)) {\n        const sampleAnimation = animate(options);\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        let t = 0;\n        while (!state.done) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        delay: -elapsed,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n    });\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(keyframes[keyframes.length - 1]);\n        onComplete && onComplete();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    return () => {\n        /**\n         * WAAPI doesn't natively have any interruption capabilities.\n         *\n         * Rather than read commited styles back out of the DOM, we can\n         * create a renderless JS animation and sample it twice to calculate\n         * its current value, \"previous\" value, and therefore allow\n         * Motion to calculate velocity for any subsequent animation.\n         */\n        const { currentTime } = animation;\n        if (currentTime) {\n            const sampleAnimation = animate(options);\n            value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n        }\n        sync.update(() => animation.cancel());\n    };\n}\n\nexport { createAcceleratedAnimation };\n"]},"metadata":{},"sourceType":"module"}